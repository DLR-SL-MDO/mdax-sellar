{"identifier": "15c69ec0-0b19-4fff-9e9b-d6de70b22086", "workflowVersion": "5.0", "name": "Sellar Problem - Opt", "nodes": [{"identifier": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "name": "Optimizer", "location": "270:270", "zIndex": "1", "active": "true", "component": {"identifier": "de.rcenvironment.optimizer", "version": "8", "name": "Optimizer"}, "configuration": {"CustomDakotaPath": "false", "algorithm": "Dakota Coliny COBYLA (Constraint Optimization By Linear Approximations)", "dakotaExecPath": "${dakotaExecPath}", "methodConfigurations": "{\r\n  \"Pyranha Conjugate Gradient Based Strategy [Pyranha's method]\" : {\r\n    \"methodName\" : \"Pyranha Conjugate Gradient Based Strategy\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"maxcycle\" : {\r\n        \"GuiName\" : \"Number of cycles\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"200\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"tolerance\" : {\r\n        \"GuiName\" : \"Stopping criteria tolerance\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0e-9\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"gradient\" : {\r\n        \"GuiName\" : \"Gradient\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"Adjoint,Finite Differences,Central Finite Differences\",\r\n        \"DefaultValue\" : \"Adjoint\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"signgrad\" : {\r\n        \"GuiName\" : \"Sign of gradient\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"positive,negative\",\r\n        \"DefaultValue\" : \"positive\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"dobj1\" : {\r\n        \"GuiName\" : \"Expected improvement at first step (in %)\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"maxstepls\" : {\r\n        \"GuiName\" : \"Maximum allowed step size during line search\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"minstepls\" : {\r\n        \"GuiName\" : \"Minimum allowed step size during line search\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"monitor\" : {\r\n        \"GuiName\" : \"Output level\",\r\n        \"GuiOrder\" : \"9\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"DefaultValue\" : \"2\",\r\n        \"Choices\" : \"1,2,3\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"Pyranha\"\r\n    }\r\n  },\r\n  \"Dakota Surrogate-Based Local\" : {\r\n    \"methodName\" : \"Dakota Surrogate-Based Local\",\r\n    \"methodCode\" : \"surrogate_based_local\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"2\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"approx_method_pointer\" : {\r\n        \"doNotShow\" : \"true\",\r\n        \"dataType\" : \"String\",\r\n        \"DefaultValue\" : \"method2\",\r\n        \"Value\" : \"\"\r\n      },\r\n      \"dace_list\" : {\r\n        \"doNotShow\" : \"true\",\r\n        \"doNotWrite\" : \"true\",\r\n        \"dataType\" : \"String\",\r\n        \"DefaultValue\" : \"Dakota Latin Hypercube Sampling\",\r\n        \"Value\" : \"\"\r\n      },\r\n      \"approx_method_list\" : {\r\n        \"doNotShow\" : \"true\",\r\n        \"doNotWrite\" : \"true\",\r\n        \"dataType\" : \"String\",\r\n        \"DefaultValue\" : \"Dakota Coliny COBYLA (Constraint Optimization By Linear Approximations),Dakota Quasi-Newton method\",\r\n        \"Value\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : {\r\n      \"gradients\" : {\r\n        \"GuiName\" : \"Use gradients\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"no_gradients,numerical_gradients\",\r\n        \"DefaultValue\" : \"no_gradients\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"noKeyword\" : \"true\"\r\n      },\r\n      \"interval_type\" : {\r\n        \"GuiName\" : \"Gradient interval type\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"forward,central\",\r\n        \"DefaultValue\" : \"forward\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"fd_gradient_step_size\" : {\r\n        \"GuiName\" : \"Gradient stepsize\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"hessians\" : {\r\n        \"GuiName\" : \"Use hessians\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"no_hessians\",\r\n        \"DefaultValue\" : \"no_hessians\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"noKeyword\" : \"true\"\r\n      }\r\n    },\r\n    \"configMap\" : null\r\n  },\r\n  \"Pyranha LHS DOE method [Pyranha's method]\" : {\r\n    \"methodName\" : \"Pyranha LHS DOE method\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"maxcycle\" : {\r\n        \"GuiName\" : \"Number of sampling points\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"10\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"Pyranha\"\r\n    }\r\n  },\r\n  \"Dakota HOPSPACK Asynch Pattern Search\" : {\r\n    \"methodName\" : \"Dakota HOPSPACK Asynch Pattern Search\",\r\n    \"methodCode\" : \"asynch_pattern_search\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"initial_delta\" : {\r\n        \"GuiName\" : \"Initial offset value\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"threshold_delta\" : {\r\n        \"GuiName\" : \"Threshold for offset values\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.01\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"contraction_factor\" : {\r\n        \"GuiName\" : \"Pattern contraction factor\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.5\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"solution_target\" : {\r\n        \"GuiName\" : \"Solution target\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"optional\"\r\n      },\r\n      \"synchronization\" : {\r\n        \"GuiName\" : \"Evaluation synchronization\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"blocking,nonblocking\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"nonblocking\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"merit_function\" : {\r\n        \"GuiName\" : \"Merit function\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"merit_max,merit_max_smooth,merit1,merit1_smooth,merit2,merit2_smooth,merit2_squared\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"merit2_squared\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_penalty\" : {\r\n        \"GuiName\" : \"Constraint penalty\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"smoothing_factor\" : {\r\n        \"GuiName\" : \"Smoothing factor\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : null\r\n  },\r\n  \"Pyranha Evolutionary Strategy [Pyranha's method]\" : {\r\n    \"methodName\" : \"Pyranha Evolutionary Strategy\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"maxcycle\" : {\r\n        \"GuiName\" : \"Number of generations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"10\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"popsize\" : {\r\n        \"GuiName\" : \"Size of population\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"10\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"strategy\" : {\r\n        \"GuiName\" : \"Strategy (2. is modified Version)\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Choices\" : \"1,2\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"rndini\" : {\r\n        \"GuiName\" : \"Random generator initiatior\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"monitor\" : {\r\n        \"GuiName\" : \"Output level\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"1,2,3\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"pc\" : {\r\n        \"GuiName\" : \"Probability of crossover\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.7\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"f\" : {\r\n        \"GuiName\" : \"Scaling factor\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.9\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"Pyranha\"\r\n    }\r\n  },\r\n  \"Pyranha Steepest Descent Gradient Based Strategy [Pyranha's method]\" : {\r\n    \"methodName\" : \"Pyranha Steepest Descent Gradient Based Strategy\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"maxcycle\" : {\r\n        \"GuiName\" : \"Number of cycles\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"200\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"tolerance\" : {\r\n        \"GuiName\" : \"Stopping criteria tolerance\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0e-9\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"gradient\" : {\r\n        \"GuiName\" : \"Gradient\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"Adjoint,Finite Differences,Central Finite Differences\",\r\n        \"DefaultValue\" : \"Adjoint\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"signgrad\" : {\r\n        \"GuiName\" : \"Sign of gradient\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"positive,negative\",\r\n        \"DefaultValue\" : \"positive\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"dobj1\" : {\r\n        \"GuiName\" : \"Expected improvement at first step (in %)\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"maxstepls\" : {\r\n        \"GuiName\" : \"Maximum allowed step size during line search\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"minstepls\" : {\r\n        \"GuiName\" : \"Minimum allowed step size during line search\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"monitor\" : {\r\n        \"GuiName\" : \"Output level\",\r\n        \"GuiOrder\" : \"9\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"1,2,3\",\r\n        \"DefaultValue\" : \"3\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"Pyranha\"\r\n    }\r\n  },\r\n  \"Dakota Coliny Evolutionary Algorithm\" : {\r\n    \"methodName\" : \"Dakota Coliny Evolutionary Algorithm\",\r\n    \"methodCode\" : \"coliny_ea\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"seed\" : {\r\n        \"GuiName\" : \"Random seed\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"population_size\" : {\r\n        \"GuiName\" : \"Number of population members\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"50\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"initialization_type\" : {\r\n        \"GuiName\" : \"Initialization type\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"simple_random,unique_random\",\r\n        \"DefaultValue\" : \"unique_random\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"fitness_type\" : {\r\n        \"GuiName\" : \"Fitness type\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"linear_rank,merit_function\",\r\n        \"DefaultValue\" : \"linear_rank\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"replacement_type\" : {\r\n        \"GuiName\" : \"Replacement type\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"random,chc,elitist\",\r\n        \"DefaultValue\" : \"elitist\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"NoLinebreak\" : \"true\"\r\n      },\r\n      \"replacement_type_value\" : {\r\n        \"GuiName\" : \"Replacement size\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"NoKeyword\" : \"true\"\r\n      },\r\n      \"new_solutions_generated\" : {\r\n        \"GuiName\" : \"New solutions generated\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"50\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"crossover_type\" : {\r\n        \"GuiName\" : \"Crossover type\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"two_point,blend,uniform\",\r\n        \"DefaultValue\" : \"two_point\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"crossover_rate\" : {\r\n        \"GuiName\" : \"Crossover rate\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.8\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"mutation_type\" : {\r\n        \"GuiName\" : \"Mutation type\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"replace_uniform,offset_normal,offset_cauchy,offset_uniform\",\r\n        \"DefaultValue\" : \"offset_normal\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"mutation_scale\" : {\r\n        \"GuiName\" : \"Mutation scale\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"mutation_range\" : {\r\n        \"GuiName\" : \"Mutation range\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"mutation_rate\" : {\r\n        \"GuiName\" : \"Mutation rate\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"non_adaptive\" : {\r\n        \"GuiName\" : \"Non-adaptive mutation flag\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"solution_accuracy\" : {\r\n        \"GuiName\" : \"Solution accuracy\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"required\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : null\r\n  },\r\n  \"Dakota Coliny COBYLA (Constraint Optimization By Linear Approximations)\" : {\r\n    \"methodName\" : \"Dakota Coliny COBYLA (Constraint Optimization By Linear Approximations)\",\r\n    \"methodCode\" : \"coliny_cobyla\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"initial_delta\" : {\r\n        \"GuiName\" : \"Initial trust region\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"required\"\r\n      },\r\n      \"threshold_delta\" : {\r\n        \"GuiName\" : \"Minimal trust region (stopping criterion)\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"required\"\r\n      },\r\n      \"solution_accuracy\" : {\r\n        \"GuiName\" : \"Solution accuracy\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"required\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : null\r\n  },\r\n  \"Dakota Quasi-Newton method\" : {\r\n    \"methodName\" : \"Dakota Quasi-Newton method\",\r\n    \"methodCode\" : \"optpp_q_newton\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"search_method\" : {\r\n        \"GuiName\" : \"Search method\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"value_based_line_search,gradient_based_line_search,trust_region,tr_pds\",\r\n        \"DefaultValue\" : \"trust_region\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"IsGroup\" : \"true\"\r\n      },\r\n      \"max_step\" : {\r\n        \"GuiName\" : \"Maximum step size\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"gradient_tolerance\" : {\r\n        \"GuiName\" : \"Gradient tolerance\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"merit_function\" : {\r\n        \"GuiName\" : \"Merit function\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"el_bakry,argaez_tapia,van_shanno\",\r\n        \"DefaultValue\" : \"argaez_tapia\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"steplength_to_boundary\" : {\r\n        \"GuiName\" : \"Steplengh to boundary\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.99995\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"centering_parameter\" : {\r\n        \"GuiName\" : \"Centering parameter\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"0.1\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : {\r\n      \"gradients\" : {\r\n        \"GuiName\" : \"Use gradients\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"numerical_gradients,analytic_gradients\",\r\n        \"DefaultValue\" : \"numerical_gradients\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"noKeyword\" : \"true\"\r\n      },\r\n      \"interval_type\" : {\r\n        \"GuiName\" : \"Gradient interval type\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"forward,central\",\r\n        \"DefaultValue\" : \"forward\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"fd_gradient_step_size\" : {\r\n        \"GuiName\" : \"Gradient stepsize\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"hessians\" : {\r\n        \"GuiName\" : \"Use hessians\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"no_hessians,numerical_hessians\",\r\n        \"DefaultValue\" : \"no_hessians\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"noKeyword\" : \"true\"\r\n      },\r\n      \"interval_type_hessian\" : {\r\n        \"GuiName\" : \"Hessian interval type\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"forward,central\",\r\n        \"DefaultValue\" : \"forward\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"noKeyword\" : \"true\"\r\n      },\r\n      \"fd_hessian_step_size\" : {\r\n        \"GuiName\" : \"Hessian stepsize\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      }\r\n    },\r\n    \"configMap\" : null\r\n  },\r\n  \"Dakota NOMAD (Mesh Adaptive Direct Search Algorithm)\" : {\r\n    \"methodName\" : \"Dakota NOMAD (Mesh Adaptive Direct Search Algorithm)\",\r\n    \"methodCode\" : \"mesh_adaptive_search\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"function_precision\" : {\r\n        \"GuiName\" : \"Maximum precision of responses\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-5\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"seed\" : {\r\n        \"GuiName\" : \"Seed\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"variable_neighborhood_search\" : {\r\n        \"GuiName\" : \"Neighborhood search\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.5\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : null\r\n  },\r\n  \"A Test Method [example's method]\" : {\r\n    \"methodName\" : \"A Test Method\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"initial_delta\" : {\r\n        \"GuiName\" : \"Initial trust region\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"required\"\r\n      },\r\n      \"threshold_delta\" : {\r\n        \"GuiName\" : \"Minimal trust region (stopping criterion)\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"required\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"example\"\r\n    }\r\n  },\r\n  \"Dakota Latin Hypercube Sampling\" : {\r\n    \"methodName\" : \"Dakota Latin Hypercube Sampling\",\r\n    \"methodCode\" : \"dace lhs\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"seed\" : {\r\n        \"GuiName\" : \"Seed\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"fixed_seed\" : {\r\n        \"GuiName\" : \"Fixed seed flag\",\r\n        \"dataType\" : \"bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"false\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"samples\" : {\r\n        \"GuiName\" : \"Number of samples\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"10\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"symbols\" : {\r\n        \"GuiName\" : \"Number of symbols\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"main_effects\" : {\r\n        \"GuiName\" : \"Main effects\",\r\n        \"dataType\" : \"bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"quality_metrics\" : {\r\n        \"GuiName\" : \"Quality metrics\",\r\n        \"dataType\" : \"bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"variance_based_decomp\" : {\r\n        \"GuiName\" : \"Varianve based decomposition\",\r\n        \"dataType\" : \"bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : null\r\n  },\r\n  \"Pyranha Variable Metric Method [Pyranha's method]\" : {\r\n    \"methodName\" : \"Pyranha Variable Metric Method\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"maxcycle\" : {\r\n        \"GuiName\" : \"Number of cycles\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"200\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"tolerance\" : {\r\n        \"GuiName\" : \"Stopping criteria tolerance\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0e-9\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"gradient\" : {\r\n        \"GuiName\" : \"Gradient\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"Adjoint,Finite Differences,Central Finite Differences\",\r\n        \"DefaultValue\" : \"Adjoint\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"signgrad\" : {\r\n        \"GuiName\" : \"Sign of gradient\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"positive,negative\",\r\n        \"DefaultValue\" : \"positive\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"dobj1\" : {\r\n        \"GuiName\" : \"Expected improvement at first step (in %)\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"maxstepls\" : {\r\n        \"GuiName\" : \"Maximum allowed step size during line search\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"minstepls\" : {\r\n        \"GuiName\" : \"Minimum allowed step size during line search\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"update\" : {\r\n        \"GuiName\" : \"Update of the Hessian\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"BFGS,DFP,JDLEE\",\r\n        \"DefaultValue\" : \"BFGS\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"monitor\" : {\r\n        \"GuiName\" : \"Output level\",\r\n        \"GuiOrder\" : \"9\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"1,2,3\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"Pyranha\"\r\n    }\r\n  },\r\n  \"Dakota Efficient Global Optimization\" : {\r\n    \"methodName\" : \"Dakota Efficient Global Optimization\",\r\n    \"methodCode\" : \"efficient_global\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"seed\" : {\r\n        \"GuiName\" : \"Random seed\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"gaussian_process\" : {\r\n        \"GuiName\" : \"Gaussian Process surrogate model\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"surfpack,dakota\",\r\n        \"DefaultValue\" : \"surfpack\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : null\r\n  },\r\n  \"Dakota Multi Objective Genetic Algorithm\" : {\r\n    \"methodName\" : \"Dakota Multi Objectiv Genetic Algorithm\",\r\n    \"methodCode\" : \"moga\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"fitness_type\" : {\r\n        \"GuiName\" : \"Fitness type\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"layer_rank,domination_count\",\r\n        \"DefaultValue\" : \"domination_count\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"seed\" : {\r\n        \"GuiName\" : \"Random seed\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"population_size\" : {\r\n        \"GuiName\" : \"Number of population members\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"50\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"initialization_type\" : {\r\n        \"GuiName\" : \"Initialization type\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"simple_random,unique_random\",\r\n        \"DefaultValue\" : \"unique_random\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"mutation_type\" : {\r\n        \"GuiName\" : \"Mutation type\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"replace_uniform,bit_random,offset_normal,offset_cauchy,offset_uniform\",\r\n        \"DefaultValue\" : \"replace_uniform\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"mutation_rate\" : {\r\n        \"GuiName\" : \"Mutation rate\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.08\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"replacement_type\" : {\r\n        \"GuiName\" : \"Replacement type\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"roulette_wheel,unique_roulette_wheel,elitist\",\r\n        \"DefaultValue\" : \"elitist\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"crossover_type\" : {\r\n        \"GuiName\" : \"Crossover type\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"multi_point_binary,multi_point_parameterized_binary,multi_point_real\",\r\n        \"DefaultValue\" : \"multi_point_real\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"NoLinebreak\" : \"true\"\r\n      },\r\n      \"crossover_type_value\" : {\r\n        \"GuiName\" : \"Crossover type value\",\r\n        \"GuiOrder\" : \"9\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"50\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"NoKeyword\" : \"true\"\r\n      },\r\n      \"crossover_rate\" : {\r\n        \"GuiName\" : \"Crossover rate\",\r\n        \"GuiOrder\" : \"10\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"0.8\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : null\r\n  },\r\n  \"Pyranha Subplex Strategy [Pyranha's method]\" : {\r\n    \"methodName\" : \"Pyranha Subplex Strategy\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"maxcycle\" : {\r\n        \"GuiName\" : \"Number of cycles\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"20\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"tolerance\" : {\r\n        \"GuiName\" : \"Stopping criteria tolerance\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0e-9\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"norm\" : {\r\n        \"GuiName\" : \"Normalized variables\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"1,2\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"kr\" : {\r\n        \"GuiName\" : \"Reflection\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"ke\" : {\r\n        \"GuiName\" : \"Extension\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"2\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"kc\" : {\r\n        \"GuiName\" : \"Contractions\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.5\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"ks\" : {\r\n        \"GuiName\" : \"Shrinkage\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.5\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"kt\" : {\r\n        \"GuiName\" : \"Reduction coefficient\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.25\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"omega\" : {\r\n        \"GuiName\" : \"Step reduction coefficient for next subplex search\",\r\n        \"GuiOrder\" : \"9\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"nsmin\" : {\r\n        \"GuiName\" : \"Minimum subspace dimension\",\r\n        \"GuiOrder\" : \"10\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"3\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"nsmax\" : {\r\n        \"GuiName\" : \"Maximum subspace dimension\",\r\n        \"GuiOrder\" : \"11\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"6\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"scale\" : {\r\n        \"GuiName\" : \"Initial simplex size (in % of range)\",\r\n        \"GuiOrder\" : \"12\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0,<1\"\r\n      },\r\n      \"monitor\" : {\r\n        \"GuiName\" : \"Output level\",\r\n        \"GuiOrder\" : \"13\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"1,2,3\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"Pyranha\"\r\n    }\r\n  },\r\n  \"Dakota Single Objective Genetic Algorithm\" : {\r\n    \"methodName\" : \"Dakota Single Objectiv Genetic Algorithm\",\r\n    \"methodCode\" : \"soga\",\r\n    \"optimizerPackage\" : \"dakota\",\r\n    \"followingMethods\" : \"0\",\r\n    \"commonSettings\" : {\r\n      \"convergence_tolerance\" : {\r\n        \"GuiName\" : \"Convergence tolerance\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_iterations\" : {\r\n        \"GuiName\" : \"Maximum iterations\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"100\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"speculative\" : {\r\n        \"GuiName\" : \"Speculative gradients and Hessians\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"constraint_tolerance\" : {\r\n        \"GuiName\" : \"Constraint tolerance\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1E-4\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"max_function_evaluations\" : {\r\n        \"GuiName\" : \"Maximum function evaluations\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1000\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"output\" : {\r\n        \"GuiName\" : \"Output verbosity\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"debug,quiet,normal,silent,verbose\",\r\n        \"Value\" : \"\",\r\n        \"DefaultValue\" : \"normal\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"final_solutions\" : {\r\n        \"GuiName\" : \"Final solutions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"scaling\" : {\r\n        \"GuiName\" : \"Scaling flag\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Bool\",\r\n        \"SWTWidget\" : \"Check\",\r\n        \"DefaultValue\" : \"false\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"specificSettings\" : {\r\n      \"fitness_type\" : {\r\n        \"GuiName\" : \"Fitness type\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"merit_function\",\r\n        \"DefaultValue\" : \"merit_function\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"seed\" : {\r\n        \"GuiName\" : \"Random seed\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"population_size\" : {\r\n        \"GuiName\" : \"Number of population members\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"50\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"initialization_type\" : {\r\n        \"GuiName\" : \"Initialization type\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"simple_random,unique_random\",\r\n        \"DefaultValue\" : \"unique_random\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"mutation_type\" : {\r\n        \"GuiName\" : \"Mutation type\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"bit_random,replace_uniform,bit_random,offset_normal,offset_cauchy,offset_uniform\",\r\n        \"DefaultValue\" : \"replace_uniform\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"mutation_rate\" : {\r\n        \"GuiName\" : \"Mutation rate\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.08\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"replacement_type\" : {\r\n        \"GuiName\" : \"Replacement type\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"favor_feasible,roulette_wheel,unique_roulette_wheel,elitist\",\r\n        \"DefaultValue\" : \"elitist\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"crossover_type\" : {\r\n        \"GuiName\" : \"Crossover type\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"None\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"multi_point_binary,multi_point_parameterized_binary,multi_point_real\",\r\n        \"DefaultValue\" : \"multi_point_real\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"NoLinebreak\" : \"true\"\r\n      },\r\n      \"crossover_type_value\" : {\r\n        \"GuiName\" : \"Crossover type value\",\r\n        \"GuiOrder\" : \"9\",\r\n        \"dataType\" : \"Int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"50\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\",\r\n        \"NoKeyword\" : \"true\"\r\n      },\r\n      \"crossover_rate\" : {\r\n        \"GuiName\" : \"Crossover rate\",\r\n        \"GuiOrder\" : \"10\",\r\n        \"dataType\" : \"Real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.8\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : null\r\n  },\r\n  \"Pyranha Simplex Strategy [Pyranha's method]\" : {\r\n    \"methodName\" : \"Pyranha Simplex Strategy\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"maxcycle\" : {\r\n        \"GuiName\" : \"Number of cycles\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"200\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">0\"\r\n      },\r\n      \"tolerance\" : {\r\n        \"GuiName\" : \"Stopping criteria tolerance\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1.0e-9\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \">=0\"\r\n      },\r\n      \"kt\" : {\r\n        \"GuiName\" : \"Reduction coefficient\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.25\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"norm\" : {\r\n        \"GuiName\" : \"Normalize variables\",\r\n        \"GuiOrder\" : \"4\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"0,1\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"kr\" : {\r\n        \"GuiName\" : \"Reflection\",\r\n        \"GuiOrder\" : \"5\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"ke\" : {\r\n        \"GuiName\" : \"Extension\",\r\n        \"GuiOrder\" : \"6\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"2\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"kc\" : {\r\n        \"GuiName\" : \"Contractions\",\r\n        \"GuiOrder\" : \"7\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.5\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"ks\" : {\r\n        \"GuiName\" : \"Shrinkage\",\r\n        \"GuiOrder\" : \"8\",\r\n        \"dataType\" : \"real\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"0.5\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"monitor\" : {\r\n        \"GuiName\" : \"Output level\",\r\n        \"GuiOrder\" : \"9\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"1,2,3\",\r\n        \"DefaultValue\" : \"1\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"Pyranha\"\r\n    }\r\n  },\r\n  \"Pyranha DOE Scanner method [Pyranha's method]\" : {\r\n    \"methodName\" : \"Pyranha Scanner DOE method\",\r\n    \"methodCode\" : null,\r\n    \"optimizerPackage\" : \"generic\",\r\n    \"followingMethods\" : null,\r\n    \"commonSettings\" : { },\r\n    \"specificSettings\" : {\r\n      \"stepsize\" : {\r\n        \"GuiName\" : \"Stepsize\",\r\n        \"GuiOrder\" : \"1\",\r\n        \"dataType\" : \"String\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"step,cycle\",\r\n        \"DefaultValue\" : \"step\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"monitor\" : {\r\n        \"GuiName\" : \"Output level\",\r\n        \"GuiOrder\" : \"3\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Combo\",\r\n        \"Choices\" : \"1,2,3\",\r\n        \"DefaultValue\" : \"3\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      },\r\n      \"maxcycle\" : {\r\n        \"GuiName\" : \"Maxcycle in each direction\",\r\n        \"GuiOrder\" : \"2\",\r\n        \"dataType\" : \"int\",\r\n        \"SWTWidget\" : \"Text\",\r\n        \"DefaultValue\" : \"5\",\r\n        \"Value\" : \"\",\r\n        \"Validation\" : \"\"\r\n      }\r\n    },\r\n    \"responsesSettings\" : null,\r\n    \"configMap\" : {\r\n      \"genericFolder\" : \"Pyranha\"\r\n    }\r\n  }\r\n}", "optimizerPackageCode": "dakota", "preCalcFilePath": "", "storeComponentHistoryData": "true", "usePrecalculation": "false"}, "staticOutputs": [{"identifier": "2c7173d8-cf1c-40cb-896c-39d9809519bc", "name": "Done", "datatype": "Boolean"}, {"identifier": "a9e120e0-3cfa-4685-b8be-d9be872aac6a", "name": "Gradient request", "datatype": "Boolean"}, {"identifier": "ff8109e6-be58-4db2-ba57-579a0ae9b081", "name": "Iteration", "datatype": "Integer"}], "dynamicInputs": [{"identifier": "d2c0cee1-d53c-403f-a1b1-c2d8a9141f01", "name": "/sellar/constraints/constraint/g2", "epIdentifier": "Constraint", "group": "valuesToOptimize", "datatype": "Float", "metadata": {"hasGradient": "false", "hasSingleBounds": "true", "lower": "-1.7976931348623157e+308", "upper": "0.0", "vectorSize": ""}}, {"identifier": "d07bdd30-a2fa-4daf-a101-2f407346e635", "name": "/sellar/constraints/constraint/g1", "epIdentifier": "Constraint", "group": "valuesToOptimize", "datatype": "Float", "metadata": {"hasGradient": "false", "hasSingleBounds": "true", "lower": "0.0", "upper": "1.7976931348623157e+308", "vectorSize": ""}}, {"identifier": "b5cb3768-a18a-4539-9fc0-20a59cb91ee0", "name": "/sellar/objectives/objective/f", "epIdentifier": "Objective", "group": "valuesToOptimize", "datatype": "Float", "metadata": {"goal": "Minimize", "hasGradient": "false", "vectorSize": "", "weight": "1"}}, {"identifier": "a4671913-8697-4b0d-9ff7-c95748317b2b", "name": "/sellar/variables/variable/x1 - start value", "epIdentifier": "startvalues", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "4ba03e23-8c8b-4361-b15d-cf4fafc9abf5", "name": "/sellar/variables/variable/z2 - start value", "epIdentifier": "startvalues", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "8618a332-d50f-4790-b752-5fcb084d2b71", "name": "/sellar/variables/variable/z1 - start value", "epIdentifier": "startvalues", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "e40e70e9-e599-4fa2-b790-7fc50ea38c6a", "name": "XML", "epIdentifier": "toForward", "group": "valuesToOptimize", "datatype": "FileReference"}, {"identifier": "f1f24067-aced-48b2-93c1-6694a9e771be", "name": "XML_start", "epIdentifier": "startToForward", "group": "startValues", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "fa3285b5-638b-494a-9b5d-d961201a8d66", "name": "/sellar/variables/variable/x1", "epIdentifier": "Design", "datatype": "Float", "metadata": {"hasSingleBounds": "true", "hasStartValue": "true", "isDiscrete": "false", "lower": "-1.7976931348623157e+308", "startValue": "1.0", "step": "1", "upper": "10.0", "useStep": "false", "useUnifiedStep": "true", "vectorSize": "true"}}, {"identifier": "6d98b87b-612f-4144-a746-ec91c3828eb5", "name": "/sellar/variables/variable/x1_optimal", "epIdentifier": "Design", "datatype": "Float", "metadata": {"hasStartValue": "true", "lower": "-1.7976931348623157e+308", "startValue": "1.0", "upper": "10.0"}}, {"identifier": "3dfedffb-ab8a-43a3-8681-17cf9f7b6932", "name": "/sellar/variables/variable/z2", "epIdentifier": "Design", "datatype": "Float", "metadata": {"hasSingleBounds": "true", "hasStartValue": "true", "isDiscrete": "false", "lower": "-1.7976931348623157e+308", "startValue": "1.0", "step": "1", "upper": "10.0", "useStep": "false", "useUnifiedStep": "true", "vectorSize": "true"}}, {"identifier": "afd7bacc-5ee5-441f-8273-84f8db3dc60f", "name": "/sellar/variables/variable/z2_optimal", "epIdentifier": "Design", "datatype": "Float", "metadata": {"hasStartValue": "true", "lower": "-1.7976931348623157e+308", "startValue": "1.0", "upper": "10.0"}}, {"identifier": "a74922ad-f716-4236-8235-9632f776b7df", "name": "/sellar/variables/variable/z1", "epIdentifier": "Design", "datatype": "Float", "metadata": {"hasSingleBounds": "true", "hasStartValue": "false", "isDiscrete": "false", "lower": "-10.0", "startValue": "", "step": "1", "upper": "10.0", "useStep": "false", "useUnifiedStep": "true", "vectorSize": "true"}}, {"identifier": "e89ebe2c-e3a4-4df7-b333-1144be56da97", "name": "/sellar/variables/variable/z1_optimal", "epIdentifier": "Design", "datatype": "Float", "metadata": {"hasStartValue": "false", "lower": "-10.0", "startValue": "", "upper": "10.0"}}, {"identifier": "30c3ec17-88d0-41be-8645-6fbb1754bc0e", "name": "XML", "epIdentifier": "toForward", "datatype": "FileReference"}, {"identifier": "6b074340-e2e4-49a0-aae4-9fff9b37b22b", "name": "XML_optimal", "epIdentifier": "finalToForward", "datatype": "FileReference"}]}, {"identifier": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "name": "MDA", "location": "490:490", "zIndex": "2", "active": "true", "component": {"identifier": "de.rcenvironment.converger", "version": "6", "name": "Converger"}, "configuration": {"epsA": "1e-02", "epsR": "1e-02", "failLoopOnly-NAV_5e0ed1cd": "true", "isNestedLoop_5e0ed1cd": "true", "iterationsToConsider": "1", "maxConvChecks": "100", "maxRerunBeforeFail-NAV_5e0ed1cd": "1", "notConvFail": "false", "notConvIgnore": "true", "notConvNotAValue": "false", "storeComponentHistoryData": "true"}, "staticOutputs": [{"identifier": "b4d7533d-a8f5-4dc9-abca-be9161c3db6f", "name": "Converged", "datatype": "Boolean"}, {"identifier": "20edba22-5d02-4ac1-8469-af256b045124", "name": "Converged absolute", "datatype": "Boolean"}, {"identifier": "a08e5b2e-63e8-4e70-9807-976a1aa825ab", "name": "Converged relative", "datatype": "Boolean"}, {"identifier": "ae106a55-2a00-4061-96ae-839a07205180", "name": "Done", "datatype": "Boolean"}], "dynamicInputs": [{"identifier": "8abe226d-f9c2-448b-896d-2df6deb50fd4", "name": "/sellar/variables/variable/y1", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "4b1dedb5-fc92-4d3e-a6f4-18930b238487", "name": "/sellar/variables/variable/y1_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "e53792a1-e67c-4282-af14-fac156245b89", "name": "/sellar/variables/variable/y2", "epIdentifier": "valueToConverge", "group": "valuesToConverge", "datatype": "Float", "metadata": {"hasStartValue": "false", "startValue": ""}}, {"identifier": "53f75a69-ce7b-4ad5-a70e-11b73801bab4", "name": "/sellar/variables/variable/y2_start", "epIdentifier": "startToConverge", "group": "startValues", "datatype": "Float", "metadata": {"inputExecutionConstraint_4aae3eea": "Required"}}, {"identifier": "602a2fb1-cdf0-4a73-a2e8-c675d9de82d1", "name": "XML", "epIdentifier": "toForward", "group": "valuesToConverge", "datatype": "FileReference"}, {"identifier": "880184d9-2830-4730-91dc-9c93657b580e", "name": "XML_start", "epIdentifier": "startToForward", "group": "startValues", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "16881c2c-e6f0-4b9f-8203-c669ac5ad9a0", "name": "/sellar/variables/variable/y1", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "dccdf55a-86b2-41dc-81ee-c398eb35f724", "name": "/sellar/variables/variable/y1_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "3e1c47f0-33bc-42a9-b19e-9f3279a1130d", "name": "/sellar/variables/variable/y1_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "c54c24a4-afc5-465d-a3c8-1e90b186b1d1", "name": "/sellar/variables/variable/y2", "epIdentifier": "valueToConverge", "datatype": "Float"}, {"identifier": "e4571891-5f9e-4cc0-a4ff-a3589d9ee107", "name": "/sellar/variables/variable/y2_converged", "epIdentifier": "finalToConverge", "datatype": "Float"}, {"identifier": "eea66fb2-e14f-4d66-8e98-a01b6aa0365c", "name": "/sellar/variables/variable/y2_is_converged", "epIdentifier": "auxiliaryValue", "datatype": "Boolean"}, {"identifier": "ebf86192-041c-4324-a6cd-d15462835abd", "name": "XML", "epIdentifier": "toForward", "datatype": "FileReference"}, {"identifier": "2b2d17ca-4c51-40ed-b813-24e6c0aa5528", "name": "XML_converged", "epIdentifier": "finalToForward", "datatype": "FileReference"}]}, {"identifier": "a65a5941-4459-4df9-9199-858c93134afe", "name": "D1", "location": "710:710", "zIndex": "3", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "import re\nimport time\nfrom math import *\nimport xml.etree.ElementTree as et\n\n\nREGEX_ATTR = r\"\\[(.*?)\\]\"\nREGEX_NODE = r\"^([^\\[]+)\"  # https://stackoverflow.com/a/44314104/14507516\nREGEX_ALPHANUM = r\"[^A-Za-z0-9\\_\\-]+\"\n\n\ndef main():\n\n    # parse tree\n    file_path = RCE.read_input('XML')\n    in_tree = et.parse(file_path)\n    r_in = in_tree.getroot()\n\n    # get all parameters\n    x1 = float(r_in.find(\"./variables/variable/x1\").text)\n    y2 = float(r_in.find(\"./variables/variable/y2\").text)\n    z1 = float(r_in.find(\"./variables/variable/z1\").text)\n    z2 = float(r_in.find(\"./variables/variable/z2\").text)\n\n    # define math expressions\n    y1 = z1**2 +   z2 + x1 - 0.2*y2\n\n    # build output tree\n    output_xpaths = ['/sellar/variables/variable/y1']\n    r_out = tree_from_xpaths(output_xpaths)\n    out_tree = et.ElementTree(r_out)\n\n    # write results\n    r_out.find(\"./variables/variable/y1\").text = str(y1)\n\n    # write output\n    output_path = random_rename(file_path, same_path=False)\n    out_file = open(output_path, \"wb\")\n    out_tree.write(out_file, encoding=\"utf-8\")\n    out_file.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_out_\" + str(int(time.time()*100000)) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\ndef get_components(xpath):\n    \"\"\"Gets components that make up XPATH.\"\"\"\n    return list(filter(None, xpath.split(\"/\")))  # filters out empty strings\n\n\ndef alphanum(string):\n    \"\"\"Removes all special characters.\"\"\"\n    return re.sub(REGEX_ALPHANUM, '', string)  # https://stackoverflow.com/a/5843547/14507516\n\n\ndef element_from_component(comp):\n    name = re.match(REGEX_NODE, comp).group()\n    attrs = re.findall(REGEX_ATTR, comp)\n\n    element = et.Element(name)\n    for att in attrs:\n        key, val = att.split(\"=\")\n        element.set(alphanum(key), alphanum(val))\n\n    return element\n\n\ndef elements_equal(one, other):\n    return all([\n        one.tag == other.tag,\n        one.text == other.text,\n        one.tail == other.tail,\n        one.attrib == other.attrib\n    ])\n\n\ndef build_xpath_tree(tree_node, xpath_components):\n    if xpath_components:\n        el = element_from_component(xpath_components.pop(0))\n        if tree_node is None:\n            tree_node = el\n            build_xpath_tree(tree_node, xpath_components)\n        else:\n            for child in tree_node.getchildren():\n                if elements_equal(el, child):\n                    build_xpath_tree(child, xpath_components)\n                    break\n            else:\n                tree_node.append(el)\n                build_xpath_tree(el, xpath_components)\n\n    return tree_node\n\n\ndef tree_from_xpaths(xpaths):\n    root = build_xpath_tree(None, get_components(xpaths[0]))\n    for xpath in xpaths[1:]:\n        build_xpath_tree(root, get_components(xpath)[1:])  # ignore root component\n\n    return root\n\nmain()", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "7bc80988-e635-4b8a-ae46-856da22e8523", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "588a2414-9068-4722-8d0c-dbddcb5d95c2", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "c6670238-ee96-40cc-b297-153d402ae9fe", "name": "D2", "location": "1010:990", "zIndex": "4", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "import re\nimport time\nfrom math import *\nimport xml.etree.ElementTree as et\n\n\nREGEX_ATTR = r\"\\[(.*?)\\]\"\nREGEX_NODE = r\"^([^\\[]+)\"  # https://stackoverflow.com/a/44314104/14507516\nREGEX_ALPHANUM = r\"[^A-Za-z0-9\\_\\-]+\"\n\n\ndef main():\n\n    # parse tree\n    file_path = RCE.read_input('XML')\n    in_tree = et.parse(file_path)\n    r_in = in_tree.getroot()\n\n    # get all parameters\n    y1 = float(r_in.find(\"./variables/variable/y1\").text)\n    z1 = float(r_in.find(\"./variables/variable/z1\").text)\n    z2 = float(r_in.find(\"./variables/variable/z2\").text)\n\n    # define math expressions\n    y2 = y1**0.5 + z1 + z2\n\n    # build output tree\n    output_xpaths = ['/sellar/variables/variable/y2']\n    r_out = tree_from_xpaths(output_xpaths)\n    out_tree = et.ElementTree(r_out)\n\n    # write results\n    r_out.find(\"./variables/variable/y2\").text = str(y2)\n\n    # write output\n    output_path = random_rename(file_path, same_path=False)\n    out_file = open(output_path, \"wb\")\n    out_tree.write(out_file, encoding=\"utf-8\")\n    out_file.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_out_\" + str(int(time.time()*100000)) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\ndef get_components(xpath):\n    \"\"\"Gets components that make up XPATH.\"\"\"\n    return list(filter(None, xpath.split(\"/\")))  # filters out empty strings\n\n\ndef alphanum(string):\n    \"\"\"Removes all special characters.\"\"\"\n    return re.sub(REGEX_ALPHANUM, '', string)  # https://stackoverflow.com/a/5843547/14507516\n\n\ndef element_from_component(comp):\n    name = re.match(REGEX_NODE, comp).group()\n    attrs = re.findall(REGEX_ATTR, comp)\n\n    element = et.Element(name)\n    for att in attrs:\n        key, val = att.split(\"=\")\n        element.set(alphanum(key), alphanum(val))\n\n    return element\n\n\ndef elements_equal(one, other):\n    return all([\n        one.tag == other.tag,\n        one.text == other.text,\n        one.tail == other.tail,\n        one.attrib == other.attrib\n    ])\n\n\ndef build_xpath_tree(tree_node, xpath_components):\n    if xpath_components:\n        el = element_from_component(xpath_components.pop(0))\n        if tree_node is None:\n            tree_node = el\n            build_xpath_tree(tree_node, xpath_components)\n        else:\n            for child in tree_node.getchildren():\n                if elements_equal(el, child):\n                    build_xpath_tree(child, xpath_components)\n                    break\n            else:\n                tree_node.append(el)\n                build_xpath_tree(el, xpath_components)\n\n    return tree_node\n\n\ndef tree_from_xpaths(xpaths):\n    root = build_xpath_tree(None, get_components(xpaths[0]))\n    for xpath in xpaths[1:]:\n        build_xpath_tree(root, get_components(xpath)[1:])  # ignore root component\n\n    return root\n\nmain()", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "5f92f375-a651-47dc-ab59-57e946cd2fa4", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "9a85125b-181f-44eb-9782-eac33e7ad154", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "50ca6329-acd4-40f0-b7e8-ec1cc135a915", "name": "Obj", "location": "1310:1270", "zIndex": "5", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "import re\nimport time\nfrom math import *\nimport xml.etree.ElementTree as et\n\n\nREGEX_ATTR = r\"\\[(.*?)\\]\"\nREGEX_NODE = r\"^([^\\[]+)\"  # https://stackoverflow.com/a/44314104/14507516\nREGEX_ALPHANUM = r\"[^A-Za-z0-9\\_\\-]+\"\n\n\ndef main():\n\n    # parse tree\n    file_path = RCE.read_input('XML')\n    in_tree = et.parse(file_path)\n    r_in = in_tree.getroot()\n\n    # get all parameters\n    x1 = float(r_in.find(\"./variables/variable/x1\").text)\n    z1 = float(r_in.find(\"./variables/variable/z1\").text)\n    y1 = float(r_in.find(\"./variables/variable/y1\").text)\n    y2 = float(r_in.find(\"./variables/variable/y2\").text)\n\n    # define math expressions\n    f = 1\n\n    # build output tree\n    output_xpaths = ['/sellar/objectives/objective/f']\n    r_out = tree_from_xpaths(output_xpaths)\n    out_tree = et.ElementTree(r_out)\n\n    # write results\n    r_out.find(\"./objectives/objective/f\").text = str(f)\n\n    # write output\n    output_path = random_rename(file_path, same_path=False)\n    out_file = open(output_path, \"wb\")\n    out_tree.write(out_file, encoding=\"utf-8\")\n    out_file.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_out_\" + str(int(time.time()*100000)) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\ndef get_components(xpath):\n    \"\"\"Gets components that make up XPATH.\"\"\"\n    return list(filter(None, xpath.split(\"/\")))  # filters out empty strings\n\n\ndef alphanum(string):\n    \"\"\"Removes all special characters.\"\"\"\n    return re.sub(REGEX_ALPHANUM, '', string)  # https://stackoverflow.com/a/5843547/14507516\n\n\ndef element_from_component(comp):\n    name = re.match(REGEX_NODE, comp).group()\n    attrs = re.findall(REGEX_ATTR, comp)\n\n    element = et.Element(name)\n    for att in attrs:\n        key, val = att.split(\"=\")\n        element.set(alphanum(key), alphanum(val))\n\n    return element\n\n\ndef elements_equal(one, other):\n    return all([\n        one.tag == other.tag,\n        one.text == other.text,\n        one.tail == other.tail,\n        one.attrib == other.attrib\n    ])\n\n\ndef build_xpath_tree(tree_node, xpath_components):\n    if xpath_components:\n        el = element_from_component(xpath_components.pop(0))\n        if tree_node is None:\n            tree_node = el\n            build_xpath_tree(tree_node, xpath_components)\n        else:\n            for child in tree_node.getchildren():\n                if elements_equal(el, child):\n                    build_xpath_tree(child, xpath_components)\n                    break\n            else:\n                tree_node.append(el)\n                build_xpath_tree(el, xpath_components)\n\n    return tree_node\n\n\ndef tree_from_xpaths(xpaths):\n    root = build_xpath_tree(None, get_components(xpaths[0]))\n    for xpath in xpaths[1:]:\n        build_xpath_tree(root, get_components(xpath)[1:])  # ignore root component\n\n    return root\n\nmain()", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "b4c9f058-68c5-41d4-a02f-dd390a9be8d8", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "269c5080-8832-4df7-bd4f-ff19604745fa", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "e67e9c99-2654-44b0-8b47-3d2b5caa0604", "name": "Constraint 1", "location": "1610:1550", "zIndex": "6", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "import re\nimport time\nfrom math import *\nimport xml.etree.ElementTree as et\n\n\nREGEX_ATTR = r\"\\[(.*?)\\]\"\nREGEX_NODE = r\"^([^\\[]+)\"  # https://stackoverflow.com/a/44314104/14507516\nREGEX_ALPHANUM = r\"[^A-Za-z0-9\\_\\-]+\"\n\n\ndef main():\n\n    # parse tree\n    file_path = RCE.read_input('XML')\n    in_tree = et.parse(file_path)\n    r_in = in_tree.getroot()\n\n    # get all parameters\n    y1 = float(r_in.find(\"./variables/variable/y1\").text)\n\n    # define math expressions\n    g1 = 3.16 - y1\n\n    # build output tree\n    output_xpaths = ['/sellar/constraints/constraint/g1']\n    r_out = tree_from_xpaths(output_xpaths)\n    out_tree = et.ElementTree(r_out)\n\n    # write results\n    r_out.find(\"./constraints/constraint/g1\").text = str(g1)\n\n    # write output\n    output_path = random_rename(file_path, same_path=False)\n    out_file = open(output_path, \"wb\")\n    out_tree.write(out_file, encoding=\"utf-8\")\n    out_file.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_out_\" + str(int(time.time()*100000)) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\ndef get_components(xpath):\n    \"\"\"Gets components that make up XPATH.\"\"\"\n    return list(filter(None, xpath.split(\"/\")))  # filters out empty strings\n\n\ndef alphanum(string):\n    \"\"\"Removes all special characters.\"\"\"\n    return re.sub(REGEX_ALPHANUM, '', string)  # https://stackoverflow.com/a/5843547/14507516\n\n\ndef element_from_component(comp):\n    name = re.match(REGEX_NODE, comp).group()\n    attrs = re.findall(REGEX_ATTR, comp)\n\n    element = et.Element(name)\n    for att in attrs:\n        key, val = att.split(\"=\")\n        element.set(alphanum(key), alphanum(val))\n\n    return element\n\n\ndef elements_equal(one, other):\n    return all([\n        one.tag == other.tag,\n        one.text == other.text,\n        one.tail == other.tail,\n        one.attrib == other.attrib\n    ])\n\n\ndef build_xpath_tree(tree_node, xpath_components):\n    if xpath_components:\n        el = element_from_component(xpath_components.pop(0))\n        if tree_node is None:\n            tree_node = el\n            build_xpath_tree(tree_node, xpath_components)\n        else:\n            for child in tree_node.getchildren():\n                if elements_equal(el, child):\n                    build_xpath_tree(child, xpath_components)\n                    break\n            else:\n                tree_node.append(el)\n                build_xpath_tree(el, xpath_components)\n\n    return tree_node\n\n\ndef tree_from_xpaths(xpaths):\n    root = build_xpath_tree(None, get_components(xpaths[0]))\n    for xpath in xpaths[1:]:\n        build_xpath_tree(root, get_components(xpath)[1:])  # ignore root component\n\n    return root\n\nmain()", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "58cddffb-7ace-4dca-b3ba-18b2686e1b97", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "8759bf0c-8154-4ba1-b51f-cce1d711ff4e", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "f4a2553e-2ebf-4b3c-b1af-1e86e8ab0c08", "name": "Constraint 2", "location": "1910:1830", "zIndex": "7", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "import re\nimport time\nfrom math import *\nimport xml.etree.ElementTree as et\n\n\nREGEX_ATTR = r\"\\[(.*?)\\]\"\nREGEX_NODE = r\"^([^\\[]+)\"  # https://stackoverflow.com/a/44314104/14507516\nREGEX_ALPHANUM = r\"[^A-Za-z0-9\\_\\-]+\"\n\n\ndef main():\n\n    # parse tree\n    file_path = RCE.read_input('XML')\n    in_tree = et.parse(file_path)\n    r_in = in_tree.getroot()\n\n    # get all parameters\n    y2 = float(r_in.find(\"./variables/variable/y2\").text)\n\n    # define math expressions\n    g2 = y2 - 24.0\n\n    # build output tree\n    output_xpaths = ['/sellar/constraints/constraint/g2']\n    r_out = tree_from_xpaths(output_xpaths)\n    out_tree = et.ElementTree(r_out)\n\n    # write results\n    r_out.find(\"./constraints/constraint/g2\").text = str(g2)\n\n    # write output\n    output_path = random_rename(file_path, same_path=False)\n    out_file = open(output_path, \"wb\")\n    out_tree.write(out_file, encoding=\"utf-8\")\n    out_file.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_out_\" + str(int(time.time()*100000)) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\ndef get_components(xpath):\n    \"\"\"Gets components that make up XPATH.\"\"\"\n    return list(filter(None, xpath.split(\"/\")))  # filters out empty strings\n\n\ndef alphanum(string):\n    \"\"\"Removes all special characters.\"\"\"\n    return re.sub(REGEX_ALPHANUM, '', string)  # https://stackoverflow.com/a/5843547/14507516\n\n\ndef element_from_component(comp):\n    name = re.match(REGEX_NODE, comp).group()\n    attrs = re.findall(REGEX_ATTR, comp)\n\n    element = et.Element(name)\n    for att in attrs:\n        key, val = att.split(\"=\")\n        element.set(alphanum(key), alphanum(val))\n\n    return element\n\n\ndef elements_equal(one, other):\n    return all([\n        one.tag == other.tag,\n        one.text == other.text,\n        one.tail == other.tail,\n        one.attrib == other.attrib\n    ])\n\n\ndef build_xpath_tree(tree_node, xpath_components):\n    if xpath_components:\n        el = element_from_component(xpath_components.pop(0))\n        if tree_node is None:\n            tree_node = el\n            build_xpath_tree(tree_node, xpath_components)\n        else:\n            for child in tree_node.getchildren():\n                if elements_equal(el, child):\n                    build_xpath_tree(child, xpath_components)\n                    break\n            else:\n                tree_node.append(el)\n                build_xpath_tree(el, xpath_components)\n\n    return tree_node\n\n\ndef tree_from_xpaths(xpaths):\n    root = build_xpath_tree(None, get_components(xpaths[0]))\n    for xpath in xpaths[1:]:\n        build_xpath_tree(root, get_components(xpath)[1:])  # ignore root component\n\n    return root\n\nmain()", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "ca4036d0-0d4d-4de3-a574-bd6a245bc554", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "0843f9fd-ee6c-4934-92bc-0f6af390fded", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "79db62e0-b7a4-4b43-b6d4-4f4028b52565", "name": "Optimizer_input_values", "location": "290:215", "zIndex": "8", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "6c656365-aabb-451b-b03b-56f4ac747867", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "56633415-36e3-4ced-98de-946c21c11935", "name": "XML", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "f8025a90-b72d-46e2-bd24-481d0cf17a44", "name": "/sellar/variables/variable/x1", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/x1"}}, {"identifier": "fbf3caad-adf4-4b0b-b2cf-7c4ffb66f2cb", "name": "/sellar/variables/variable/z2", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/z2"}}, {"identifier": "84a0128e-a820-467b-b585-b5a7e40cb478", "name": "/sellar/variables/variable/z1", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/z1"}}]}, {"identifier": "16e031d4-c3ab-4a83-bc60-ed296d86898a", "name": "Optimizer_loop_input_values", "location": "290:365", "zIndex": "9", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "f192f642-a04f-40d1-8030-e4aad331e21b", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "580efd74-dca7-4ba6-845c-490826d22126", "name": "XML", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "31ba0e4c-c7ff-4678-8e1e-0c08d34ce7f0", "name": "/sellar/constraints/constraint/g2", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/constraints/constraint/g2"}}, {"identifier": "6ce45fa3-0826-479a-99e6-005812cc5507", "name": "/sellar/constraints/constraint/g1", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/constraints/constraint/g1"}}, {"identifier": "6d14cfb3-7dc1-457d-89f2-1df679b00ef2", "name": "/sellar/objectives/objective/f", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/objectives/objective/f"}}]}, {"identifier": "4572286e-9a18-415c-b47d-b9fbbd4af787", "name": "Optimizer_loop_output_values", "location": "365:330", "zIndex": "10", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "262ca918-4bf0-4d86-a7b8-50c4e2aa2d80", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "39623a2d-0940-4fca-a6a8-7ce316f0bfb1", "name": "XML", "datatype": "FileReference"}], "dynamicInputs": [{"identifier": "10c77bfd-da42-4f6b-b24b-506e89b2779a", "name": "/sellar/variables/variable/x1", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/x1"}}, {"identifier": "b7aedbbe-2084-446d-a18c-a1622fe928e5", "name": "/sellar/variables/variable/z2", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/z2"}}, {"identifier": "a76d1c1e-db87-4712-aa69-57104b936d7e", "name": "/sellar/variables/variable/z1", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/z1"}}]}, {"identifier": "13069fb2-329c-45b6-9cb5-6bccd80145e7", "name": "Optimizer_concurrency_resolution_5b1DB151", "location": "270:1645", "zIndex": "11", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "a3ba014a-d06b-46c7-af8d-7e921bd3648e", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "fea466f6-def6-4f72-a1cf-022bf23f9e6f", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "bbad8cb2-4435-48b8-a008-f1ad210f0d01", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "32084fcf-9050-4eb2-9c97-19b3a4bfba83", "name": "Optimizer_concurrency_resolution_5b1DB151_merger", "location": "365:1665", "zIndex": "12", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/constraints/constraint/g1\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/constraints/constraint/g1\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "a4f24cc6-5c71-42df-a8c7-5be1e3743e32", "name": "XML", "datatype": "FileReference"}, {"identifier": "751856f8-2a78-4bbc-a055-d5c75bfc8436", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "6e9b9262-26ac-406d-87c0-4edd0b8a6068", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "50774bf0-c927-45bc-8519-68cb3adf9c49", "name": "Optimizer_concurrency_resolution_25EEF592", "location": "270:1365", "zIndex": "13", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "48418f98-efee-4cb4-99f6-867964a9d43b", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "8c4566ef-afa7-4734-9883-cea5a7de3461", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "8b7a7039-d194-4106-8046-883b673318a4", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "38d68b08-70f9-47c7-b2a0-16433fb29bf4", "name": "Optimizer_concurrency_resolution_25EEF592_merger", "location": "365:1385", "zIndex": "14", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/objectives/objective/f\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/objectives/objective/f\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "b8594fb1-1dc0-4752-acaa-595591cc526e", "name": "XML", "datatype": "FileReference"}, {"identifier": "17a4c46f-b2f2-4eec-a87c-4e06c35fe07a", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "f60dccec-ba29-4bb9-a648-cea3ff12ae61", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "644af611-fc5c-44c8-bd6d-f2ffbde35c85", "name": "MDA_input_values", "location": "510:435", "zIndex": "15", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "63d75fed-450e-4098-ad26-b8e0b2a8aa6e", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "ef318ce1-9c1d-415b-bc58-a77f51afaa12", "name": "XML", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "425dfe59-269d-4825-a4ea-04989fe8bf86", "name": "/sellar/variables/variable/y1", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/y1"}}, {"identifier": "86686a92-aba7-4100-86c2-26f43e549a3d", "name": "/sellar/variables/variable/y2", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/y2"}}]}, {"identifier": "940b0dfa-7ca3-42a0-a0e1-d00e3d458193", "name": "MDA_loop_input_values", "location": "510:585", "zIndex": "16", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "b87c2e37-dcc7-417c-947c-01f5720cf964", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "0de44583-6964-438b-a39f-1481866352b7", "name": "XML", "datatype": "FileReference"}], "dynamicOutputs": [{"identifier": "28f9dcb3-f686-462b-bd26-dac7dd61f1e5", "name": "/sellar/variables/variable/y1", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/y1"}}, {"identifier": "0f7816df-1d8f-48c3-8663-dcfa00782779", "name": "/sellar/variables/variable/y2", "epIdentifier": "default", "datatype": "Float", "metadata": {"variable.xpath": "/sellar/variables/variable/y2"}}]}, {"identifier": "16283f3b-01e8-4d8a-8533-4265dd3bcc04", "name": "D1_input_filter", "location": "730:655", "zIndex": "17", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/variables/variable/x1 |\n\t\t\t/sellar/variables/variable/y2 |\n\t\t\t/sellar/variables/variable/z1 |\n\t\t\t/sellar/variables/variable/z2\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/variables/variable/x1 |\n\t\t\t/sellar/variables/variable/y2 |\n\t\t\t/sellar/variables/variable/z1 |\n\t\t\t/sellar/variables/variable/z2\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "8171917c-59aa-4a4a-8953-4b517ef82d1a", "name": "XML", "datatype": "FileReference"}, {"identifier": "4d58fcc1-7480-4506-b44e-a216bf7ad8fa", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "ffbb83f0-9342-40ad-969e-704ed9e1d4b4", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "3694fce6-cd3f-479f-b3e8-95d2f442bf28", "name": "D1_output_filter", "location": "805:730", "zIndex": "18", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/variables/variable/y1\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/variables/variable/y1\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "0efc79e2-3269-46ab-b498-8d0203053651", "name": "XML", "datatype": "FileReference"}, {"identifier": "29b0accc-bb79-4ff7-b1aa-66e262c49593", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "33db3b19-8363-4e4e-b4cf-18b02db40b8c", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "05166d84-ce65-4cfe-82dc-45ccd53f828b", "name": "D1_splitter", "location": "785:655", "zIndex": "19", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "2a04fc7d-2aa1-4ec1-9070-762a6e51a778", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "9a118ebf-f710-4b02-bb16-a0f9226d07a9", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "7c48ba51-b232-42e8-92f6-a884fe1cfd46", "name": "D1_output_complement_filter", "location": "840:655", "zIndex": "20", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/constraints |\n\t\t\t/sellar/objectives |\n\t\t\t/sellar/variables/variable/x1 |\n\t\t\t/sellar/variables/variable/y2 |\n\t\t\t/sellar/variables/variable/z1 |\n\t\t\t/sellar/variables/variable/z2\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/constraints |\n\t\t\t/sellar/objectives |\n\t\t\t/sellar/variables/variable/x1 |\n\t\t\t/sellar/variables/variable/y2 |\n\t\t\t/sellar/variables/variable/z1 |\n\t\t\t/sellar/variables/variable/z2\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "b324e160-6eac-4291-b98d-d8cd34d19e92", "name": "XML", "datatype": "FileReference"}, {"identifier": "00bd0db2-3d57-45b8-bc10-2722728726ed", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "6229a355-f25e-4857-9494-7e320e508f94", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "e05c3ece-3f18-49a4-8079-ad25741dee69", "name": "D1_merge_script", "location": "820:805", "zIndex": "21", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "bd94fd96-a379-443e-a5ed-4a8966eb1aec", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "a7c25ae6-4cad-43c2-9ae7-f03f67e14da0", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "8dd82b47-c5cf-40ee-88d5-d770a4d8c3fd", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "3350a91d-80b6-4699-b572-53b23bc5db34", "name": "D2_input_filter", "location": "1030:935", "zIndex": "22", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/variables/variable/y1 |\n\t\t\t/sellar/variables/variable/z1 |\n\t\t\t/sellar/variables/variable/z2\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/variables/variable/y1 |\n\t\t\t/sellar/variables/variable/z1 |\n\t\t\t/sellar/variables/variable/z2\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "e271eede-c113-49d7-a78d-8de311fa5b82", "name": "XML", "datatype": "FileReference"}, {"identifier": "ff0a5da4-3ee7-4a1c-9e19-61631ec96022", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "d728418a-887c-40c2-82c1-98243d0b7615", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "5f458de2-3861-4c10-9923-892304a01f92", "name": "D2_output_filter", "location": "1105:1010", "zIndex": "23", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/variables/variable/y2\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/variables/variable/y2\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "c01d5869-a33c-4252-80aa-d4c784805aaa", "name": "XML", "datatype": "FileReference"}, {"identifier": "603bbdbf-5533-4fec-83e2-58ff659fffa6", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "5408cd99-27e9-4d83-9566-829755078a2e", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "4abb8851-5b69-4871-abe7-aa991031caa8", "name": "D2_splitter", "location": "1085:935", "zIndex": "24", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "7a87db4d-79c7-465a-9922-ac9d216339e6", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "556c9950-0945-4266-b941-9b89febacc59", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "ac307648-5c91-4f04-be7f-4584598b67db", "name": "D2_output_complement_filter", "location": "1140:935", "zIndex": "25", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/constraints |\n\t\t\t/sellar/objectives |\n\t\t\t/sellar/variables/variable/x1 |\n\t\t\t/sellar/variables/variable/y1 |\n\t\t\t/sellar/variables/variable/z1 |\n\t\t\t/sellar/variables/variable/z2\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/constraints |\n\t\t\t/sellar/objectives |\n\t\t\t/sellar/variables/variable/x1 |\n\t\t\t/sellar/variables/variable/y1 |\n\t\t\t/sellar/variables/variable/z1 |\n\t\t\t/sellar/variables/variable/z2\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "1d3c7d58-f4f5-4b7d-b333-b284dcb04dac", "name": "XML", "datatype": "FileReference"}, {"identifier": "7789a5c4-00fb-436d-88f7-0dd92c91207f", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "b536164c-1514-4a3e-bb71-bbcd97d7fd9f", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "e6cee578-817e-4dfc-8ec5-349aa4a890d8", "name": "D2_merge_script", "location": "1120:1085", "zIndex": "26", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "fc6afec5-897c-4f1a-9026-06b073309205", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "7ced061a-84e9-4cd1-a34e-df66f3a8ae3a", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "dc2228cc-f586-4465-bbfd-d048e6939384", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "d03ad6e7-03cc-4b8a-89b1-c4e58da835c1", "name": "Obj_input_filter", "location": "1330:1215", "zIndex": "27", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/variables/variable/x1 |\n\t\t\t/sellar/variables/variable/y1 |\n\t\t\t/sellar/variables/variable/y2 |\n\t\t\t/sellar/variables/variable/z1\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/variables/variable/x1 |\n\t\t\t/sellar/variables/variable/y1 |\n\t\t\t/sellar/variables/variable/y2 |\n\t\t\t/sellar/variables/variable/z1\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "87e73b71-91be-462e-8d01-c8956799c845", "name": "XML", "datatype": "FileReference"}, {"identifier": "0cb374e3-ffb0-485c-8a03-dc5fe5c68d1a", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "2fa8f708-2c0e-4b3f-aca8-ef0849707b7c", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "c9e221fb-56cb-4302-b1b3-c2881086cb54", "name": "Obj_output_filter", "location": "1405:1290", "zIndex": "28", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/objectives\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/objectives\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "732e38fc-419c-47ba-abb5-f30e164a31ff", "name": "XML", "datatype": "FileReference"}, {"identifier": "c4a533d4-6055-4988-8a80-0864af1c0a97", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "747b8214-f425-4b09-bb34-1cd7df086e4e", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "bcf89be6-a988-4989-acc5-0d767f284fbd", "name": "Obj_splitter", "location": "1385:1215", "zIndex": "29", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "72108e92-d418-4b3c-876f-1ec73a8c2b5f", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "57f7295c-b874-4b33-831c-7068cdbb1543", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "470febe3-cbb3-40ca-b26c-1dae30cc40ab", "name": "Obj_output_complement_filter", "location": "1440:1215", "zIndex": "30", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/constraints |\n\t\t\t/sellar/variables\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/constraints |\n\t\t\t/sellar/variables\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "62e87555-9b61-42de-b4b7-b4e51cd12be9", "name": "XML", "datatype": "FileReference"}, {"identifier": "a0a500a2-75ad-4bc8-aeb7-f7ec0658fdc4", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "57c65473-70e5-42ce-964f-44d7b75c348b", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "4ac5e17a-4985-40f5-b5f4-9c550ecd575f", "name": "Obj_merge_script", "location": "1420:1365", "zIndex": "31", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "a2493b08-bc73-4cd3-b32b-8b10106538dc", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "83387cdf-6aca-4f13-ab24-9447bcfd8c5a", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "1b2bc19e-a17f-4583-a121-bc22191d5ef3", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "6bb7cb68-f653-44f9-b387-7edd79bc1aeb", "name": "Constraint 1_input_filter", "location": "1630:1495", "zIndex": "32", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/variables/variable/y1\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/variables/variable/y1\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "d1f4be35-1328-4959-a523-7badf0baac2f", "name": "XML", "datatype": "FileReference"}, {"identifier": "90650e01-4a40-4fbe-a3b8-d1714e07f5ca", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "56680e45-447f-49ca-b6a4-60c57d8c685c", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "71dddc3b-97fd-482c-9a84-25709ba0d884", "name": "Constraint 1_output_filter", "location": "1705:1570", "zIndex": "33", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/constraints/constraint/g1\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/constraints/constraint/g1\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "d73d4f74-0293-4eb9-8e70-d1d21160f6e4", "name": "XML", "datatype": "FileReference"}, {"identifier": "eb037f47-5786-4d08-a078-863db4022f61", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "d166a821-e5a4-484b-90b7-3fdd15ef119c", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "c00feba5-a670-4108-8f17-96795ea0cd2d", "name": "Constraint 1_splitter", "location": "1685:1495", "zIndex": "34", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "098d382c-9da0-4cf0-ad3c-acf0bec1c66a", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "dedaebbf-3e6e-4f30-aee0-90ea6d072425", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "a8646b0b-4bd7-4f66-a26b-6776a6258fb5", "name": "Constraint 1_output_complement_filter", "location": "1740:1495", "zIndex": "35", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/constraints/constraint/g2 |\n\t\t\t/sellar/objectives |\n\t\t\t/sellar/variables\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/constraints/constraint/g2 |\n\t\t\t/sellar/objectives |\n\t\t\t/sellar/variables\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "3a7b8d2f-1f67-4199-88c1-2e1169391a9d", "name": "XML", "datatype": "FileReference"}, {"identifier": "4a58fb07-159f-41a6-ba60-c6128ce8e398", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "eab9718e-8b92-428d-9728-3cff1f419842", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "a481cfc8-9530-4630-9aef-da7195256517", "name": "Constraint 1_merge_script", "location": "1720:1645", "zIndex": "36", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "677c4a2a-af05-493a-b3fc-cbd20c122a59", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "c5186001-852c-4106-8235-3725d66826dc", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "9f4dc33d-fa22-458e-b9b5-6bcec15d7da1", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "add9cc18-268d-4b12-81b9-67516337fdf0", "name": "Constraint 2_input_filter", "location": "1930:1775", "zIndex": "37", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/variables/variable/y2\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/variables/variable/y2\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "896d1ab5-f69e-47ea-82a3-ff0625ba2287", "name": "XML", "datatype": "FileReference"}, {"identifier": "1d001c7f-54ad-4eab-b342-25599fb290cb", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "1a91e115-8337-4857-a2cb-f06f6c2f5758", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "83c160d8-d49e-4c8c-be8f-cda260cd7ac3", "name": "Constraint 2_output_filter", "location": "2005:1850", "zIndex": "38", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/constraints/constraint/g2\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/constraints/constraint/g2\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "3d0ecf78-da3c-4a3a-8f6e-d509f44c78a3", "name": "XML", "datatype": "FileReference"}, {"identifier": "778c2135-3476-4bc5-966d-303c0d8a3463", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "5a2ce54e-bd71-40c8-a463-a426f8b3663c", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "744e4a20-0501-4755-9b11-ad5cbd15282c", "name": "Constraint 2_splitter", "location": "1985:1775", "zIndex": "39", "active": "true", "component": {"identifier": "de.rcenvironment.xmlvalues", "version": "1.0", "name": "XML Values"}, "configuration": {"storeComponentHistoryData": "true"}, "staticInputs": [{"identifier": "8b0deb09-116f-44a6-ae7c-aabfeda35f50", "name": "XML", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "35b677f5-cae1-4258-a963-20e3518ad889", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "01607dba-7dbb-446d-83c5-0bbcd4719243", "name": "Constraint 2_output_complement_filter", "location": "2040:1775", "zIndex": "40", "active": "true", "component": {"identifier": "de.rcenvironment.xmlmerger", "version": "4.0", "name": "File Merger"}, "configuration": {"mappingFileDeployment": "loaded", "mappingType": "XSLT", "storeComponentHistoryData": "true", "xmlContent": "<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" exclude-result-prefixes=\"xsi\">\n\t<xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" indent=\"yes\"/>\n\n\t<!-- Filter by XPATHS -->\n\n\t<xsl:template match=\"*[descendant::node() intersect (\n\t\t\t/sellar/constraints/constraint/g1 |\n\t\t\t/sellar/objectives |\n\t\t\t/sellar/variables\n\t\t)]\" priority=\"1\">\n\t\t<xsl:copy>\n\t\t\t<xsl:copy-of select='@*'/>\n\t\t\t<xsl:apply-templates select='*'/>\n\t\t</xsl:copy>\n\t</xsl:template>\n\n\t<xsl:template match=\"*[. intersect (\n\t\t\t/sellar/constraints/constraint/g1 |\n\t\t\t/sellar/objectives |\n\t\t\t/sellar/variables\n\t\t)]\" priority=\"2\">\n\t\t<xsl:copy-of select='.'/>\n\t</xsl:template>\n\n\t<!-- remove unbound text -->\n\n\t<xsl:template match=\"text()\">\n\t\t<xsl:if test=\"preceding::comment() and following::comment()\"></xsl:if>\n\t</xsl:template>\n\n</xsl:stylesheet>"}, "staticInputs": [{"identifier": "078a0260-2255-42c8-98b8-7593b15477df", "name": "XML", "datatype": "FileReference"}, {"identifier": "65e04fd1-04b8-4520-8481-38fd35804f1c", "name": "XML to integrate", "datatype": "FileReference"}], "staticOutputs": [{"identifier": "a3896056-4ee4-4727-a43a-2150ee863cf4", "name": "XML", "datatype": "FileReference"}]}, {"identifier": "e9788b4b-0a5f-4116-b56f-9e805bad544e", "name": "Constraint 2_merge_script", "location": "2020:1925", "zIndex": "41", "active": "true", "component": {"identifier": "de.rcenvironment.script", "version": "3.4", "name": "Script"}, "configuration": {"pythonExecutionPath": "${pythonExecutionPath}", "script": "# This script is converted to a string and used in a \"script\" component in RCE. It is compiled with Jython.\n\n# The script merges the `base` and `merge` files. Equal elements from the `merge` file have precedence.\n# More than one `merge` files are possible (must be appropriately modeled in the workflow).\n# Equal Elements from latter files take precedence.\n# Equality between elements is determined according to their ancestry, tag and attributes.\n# If element does not have attributes, its position as child node is taken as attribute.\n\n# Code is adapted from https://stackoverflow.com/a/29896847\n\nimport os\nimport xml\nimport time\nimport random\nfrom uuid import uuid4\nfrom xml.etree import ElementTree as et\n\n\ndef merge_files():\n    # f_base in first pos\n    base_path, merge_path = RCE.read_input(\"XML\"), RCE.read_input(\"XML to integrate\")\n\n    # rename input files, otherwise RCE will not update input files in subsequent script executions\n    base_path_renamed = random_rename(base_path)\n    os.rename(base_path, base_path_renamed)\n    merge_path_renamed = random_rename(merge_path)\n    os.rename(merge_path, merge_path_renamed)\n\n    merged_tree = XMLCombiner([base_path_renamed, merge_path_renamed]).combine()\n\n    # write output tree to file and output variable\n    output_path = random_rename(base_path, same_path=False)\n    f_base = open(output_path, \"wb\")\n    merged_tree.write(f_base, encoding=\"utf-8\")\n    f_base.close()\n    RCE.write_output(\"XML\", output_path)\n\n\ndef random_rename(file_path, same_path=True):\n    file_name, file_ext = os.path.splitext(file_path)\n    renamed_file = file_name + \"_renamed_\" + str(int(time.time() * 1000)) + \"_\" + str(\n        int(random.randint(0, 1000000))) + file_ext\n    if not same_path:\n        return renamed_file\n    return os.path.join(os.path.dirname(file_path), renamed_file)\n\n\nclass hashabledict(dict):\n\n    def __hash__(self):\n        return hash(tuple(sorted(self.items())))\n\n\nclass XMLIndexTracker(object):\n    \"\"\"Tracks the index of similar xml elements.\"\"\"\n\n    def __init__(self):\n        self._map = {}\n\n    def __call__(self, element):\n        id = element_id(element)\n        if not id in self._map:\n            self._map[id] = 0\n        else:\n            self._map[id] += 1\n\n        return self._map[id]\n\n\nclass XMLCombiner(object):\n\n    def __init__(self, filenames):\n        assert len(filenames) > 0, \"No filenames!\"\n        # save all the roots, in order, to be processed later\n        # self.roots = [et.parse(f).getroot() for f in filenames]\n        self.roots = []\n        for f in filenames:\n            try:\n                self.roots.append(et.parse(f).getroot())\n            except xml.parsers.expat.ExpatError:  # ignores files with no root elements\n                pass\n\n    def combine(self):\n        for r in self.roots[1:]:\n            # combine each element with the first one, and update that\n            self.combine_element(self.roots[0], r)\n        # return the string representation\n        try:\n            return et.ElementTree(self.roots[0])\n        except IndexError:\n            raise IndexError(\"All files are empty!\")\n\n    def combine_element(self, one, other):\n        \"\"\"\n        This function recursively updates either the text or the children\n        of an element if another element is found in `one`, or adds it\n        from `other` if not found.\n        \"\"\"\n        # initialize index trackers\n        track_one = XMLIndexTracker()\n        track_other = XMLIndexTracker()\n\n        # Create a mapping from tag name to element, as that`s what we are filtering with\n        mapping = dict((element_id(el, track_one(el)), el) for el in one)\n        for child in other:\n            c_idx = track_other(child)\n            if len(child) == 0:\n                # Not nested\n                try:\n                    # Update the text\n                    mapping[element_id(child, c_idx)].text = child.text\n                except KeyError:\n                    # An element with this name is not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Add it\n                    one.append(child)\n            else:\n                try:\n                    # Recursively process the element, and update it in the same way\n                    self.combine_element(mapping[element_id(child, c_idx)], child)\n                except KeyError:\n                    # Not in the mapping\n                    mapping[element_id(child, c_idx)] = child\n                    # Just add it\n                    one.append(child)\n\n\ndef element_attr(element):\n    \"\"\"Returns element hashable attr dict.\"\"\"\n    return hashabledict(element.attrib) if element.attrib else hashabledict({})\n\n\ndef element_id(element, idx=None):\n    if idx is not None:\n        return (element.tag, element_attr(element), idx)\n    return (element.tag, element_attr(element))\n\n\nmerge_files()\n", "scriptLanguage": "Jython", "storeComponentHistoryData": "true", "usageOfScript": "NEW"}, "dynamicInputs": [{"identifier": "2269e321-3d5d-4aa1-9fd9-6b20c39109d3", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}, {"identifier": "927f8344-dff9-48a3-a44f-bc0b6f0bccb8", "name": "XML to integrate", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"inputExecutionConstraint_4aae3eea": "Required", "inputHandling_73b1056e": "Queue"}}], "dynamicOutputs": [{"identifier": "7c436e7d-16a3-44a5-b2e9-eeac663f8478", "name": "XML", "epIdentifier": "default", "datatype": "FileReference"}]}, {"identifier": "ecdff2fb-00ad-4298-9fce-6b9a4025523e", "name": "Input_Provider", "location": "150:100", "zIndex": "42", "active": "true", "component": {"identifier": "de.rcenvironment.inputprovider", "version": "3.2", "name": "Input Provider"}, "configuration": {"storeComponentHistoryData": "true"}, "dynamicOutputs": [{"identifier": "dc687112-e9cd-4a7d-bd84-9d8b4bc33221", "name": "XML", "epIdentifier": "default", "datatype": "FileReference", "metadata": {"fileSourceType": "atWorkflowStart", "startValue": ""}}]}, {"identifier": "e2ec4480-4809-405e-aef0-170160118a96", "name": "Optimizer_Output_Writer", "location": "2170:290", "zIndex": "43", "active": "true", "component": {"identifier": "de.rcenvironment.outputwriter", "version": "2.0", "name": "Output Writer"}, "configuration": {"OWWritePath": "${targetRootFolder}", "SelectRootOnWorkflowStart": "true", "SelectedRoot": "", "storeComponentHistoryData": "true"}, "dynamicInputs": [{"identifier": "ac791cd3-2b0d-4595-915f-f41840b80205", "name": "XML", "epIdentifier": "default", "group": "write", "datatype": "FileReference", "metadata": {"filename": "[Timestamp at workflow start]__[Workflow name]__[Execution count].xml", "folderForSaving": "[root]"}}], "dynamicInputGroups": [{"identifier": "9fa8b448-be33-4d5d-8070-f7ce271e6047", "name": "9fa8b448-be33-4d5d-8070-f7ce271e6047", "epIdentifier": "dynamicAndGroup"}]}], "connections": [{"source": "79db62e0-b7a4-4b43-b6d4-4f4028b52565", "output": "56633415-36e3-4ced-98de-946c21c11935", "target": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "input": "f1f24067-aced-48b2-93c1-6694a9e771be"}, {"source": "79db62e0-b7a4-4b43-b6d4-4f4028b52565", "output": "f8025a90-b72d-46e2-bd24-481d0cf17a44", "target": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "input": "a4671913-8697-4b0d-9ff7-c95748317b2b"}, {"source": "79db62e0-b7a4-4b43-b6d4-4f4028b52565", "output": "fbf3caad-adf4-4b0b-b2cf-7c4ffb66f2cb", "target": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "input": "4ba03e23-8c8b-4361-b15d-cf4fafc9abf5"}, {"source": "79db62e0-b7a4-4b43-b6d4-4f4028b52565", "output": "84a0128e-a820-467b-b585-b5a7e40cb478", "target": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "input": "8618a332-d50f-4790-b752-5fcb084d2b71"}, {"source": "16e031d4-c3ab-4a83-bc60-ed296d86898a", "output": "580efd74-dca7-4ba6-845c-490826d22126", "target": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "input": "e40e70e9-e599-4fa2-b790-7fc50ea38c6a"}, {"source": "16e031d4-c3ab-4a83-bc60-ed296d86898a", "output": "31ba0e4c-c7ff-4678-8e1e-0c08d34ce7f0", "target": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "input": "d2c0cee1-d53c-403f-a1b1-c2d8a9141f01"}, {"source": "16e031d4-c3ab-4a83-bc60-ed296d86898a", "output": "6ce45fa3-0826-479a-99e6-005812cc5507", "target": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "input": "d07bdd30-a2fa-4daf-a101-2f407346e635"}, {"source": "16e031d4-c3ab-4a83-bc60-ed296d86898a", "output": "6d14cfb3-7dc1-457d-89f2-1df679b00ef2", "target": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "input": "b5cb3768-a18a-4539-9fc0-20a59cb91ee0"}, {"source": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "output": "30c3ec17-88d0-41be-8645-6fbb1754bc0e", "target": "4572286e-9a18-415c-b47d-b9fbbd4af787", "input": "262ca918-4bf0-4d86-a7b8-50c4e2aa2d80"}, {"source": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "output": "fa3285b5-638b-494a-9b5d-d961201a8d66", "target": "4572286e-9a18-415c-b47d-b9fbbd4af787", "input": "10c77bfd-da42-4f6b-b24b-506e89b2779a"}, {"source": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "output": "3dfedffb-ab8a-43a3-8681-17cf9f7b6932", "target": "4572286e-9a18-415c-b47d-b9fbbd4af787", "input": "b7aedbbe-2084-446d-a18c-a1622fe928e5"}, {"source": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "output": "a74922ad-f716-4236-8235-9632f776b7df", "target": "4572286e-9a18-415c-b47d-b9fbbd4af787", "input": "a76d1c1e-db87-4712-aa69-57104b936d7e"}, {"source": "32084fcf-9050-4eb2-9c97-19b3a4bfba83", "output": "6e9b9262-26ac-406d-87c0-4edd0b8a6068", "target": "13069fb2-329c-45b6-9cb5-6bccd80145e7", "input": "fea466f6-def6-4f72-a1cf-022bf23f9e6f"}, {"source": "e9788b4b-0a5f-4116-b56f-9e805bad544e", "output": "7c436e7d-16a3-44a5-b2e9-eeac663f8478", "target": "13069fb2-329c-45b6-9cb5-6bccd80145e7", "input": "a3ba014a-d06b-46c7-af8d-7e921bd3648e"}, {"source": "a481cfc8-9530-4630-9aef-da7195256517", "output": "9f4dc33d-fa22-458e-b9b5-6bcec15d7da1", "target": "32084fcf-9050-4eb2-9c97-19b3a4bfba83", "input": "a4f24cc6-5c71-42df-a8c7-5be1e3743e32"}, {"source": "a481cfc8-9530-4630-9aef-da7195256517", "output": "9f4dc33d-fa22-458e-b9b5-6bcec15d7da1", "target": "32084fcf-9050-4eb2-9c97-19b3a4bfba83", "input": "751856f8-2a78-4bbc-a055-d5c75bfc8436"}, {"source": "38d68b08-70f9-47c7-b2a0-16433fb29bf4", "output": "f60dccec-ba29-4bb9-a648-cea3ff12ae61", "target": "50774bf0-c927-45bc-8519-68cb3adf9c49", "input": "8c4566ef-afa7-4734-9883-cea5a7de3461"}, {"source": "13069fb2-329c-45b6-9cb5-6bccd80145e7", "output": "bbad8cb2-4435-48b8-a008-f1ad210f0d01", "target": "50774bf0-c927-45bc-8519-68cb3adf9c49", "input": "48418f98-efee-4cb4-99f6-867964a9d43b"}, {"source": "4ac5e17a-4985-40f5-b5f4-9c550ecd575f", "output": "1b2bc19e-a17f-4583-a121-bc22191d5ef3", "target": "38d68b08-70f9-47c7-b2a0-16433fb29bf4", "input": "b8594fb1-1dc0-4752-acaa-595591cc526e"}, {"source": "4ac5e17a-4985-40f5-b5f4-9c550ecd575f", "output": "1b2bc19e-a17f-4583-a121-bc22191d5ef3", "target": "38d68b08-70f9-47c7-b2a0-16433fb29bf4", "input": "17a4c46f-b2f2-4eec-a87c-4e06c35fe07a"}, {"source": "50774bf0-c927-45bc-8519-68cb3adf9c49", "output": "8b7a7039-d194-4106-8046-883b673318a4", "target": "16e031d4-c3ab-4a83-bc60-ed296d86898a", "input": "f192f642-a04f-40d1-8030-e4aad331e21b"}, {"source": "644af611-fc5c-44c8-bd6d-f2ffbde35c85", "output": "ef318ce1-9c1d-415b-bc58-a77f51afaa12", "target": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "input": "880184d9-2830-4730-91dc-9c93657b580e"}, {"source": "644af611-fc5c-44c8-bd6d-f2ffbde35c85", "output": "425dfe59-269d-4825-a4ea-04989fe8bf86", "target": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "input": "4b1dedb5-fc92-4d3e-a6f4-18930b238487"}, {"source": "644af611-fc5c-44c8-bd6d-f2ffbde35c85", "output": "86686a92-aba7-4100-86c2-26f43e549a3d", "target": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "input": "53f75a69-ce7b-4ad5-a70e-11b73801bab4"}, {"source": "940b0dfa-7ca3-42a0-a0e1-d00e3d458193", "output": "0de44583-6964-438b-a39f-1481866352b7", "target": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "input": "602a2fb1-cdf0-4a73-a2e8-c675d9de82d1"}, {"source": "940b0dfa-7ca3-42a0-a0e1-d00e3d458193", "output": "28f9dcb3-f686-462b-bd26-dac7dd61f1e5", "target": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "input": "8abe226d-f9c2-448b-896d-2df6deb50fd4"}, {"source": "940b0dfa-7ca3-42a0-a0e1-d00e3d458193", "output": "0f7816df-1d8f-48c3-8663-dcfa00782779", "target": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "input": "e53792a1-e67c-4282-af14-fac156245b89"}, {"source": "4572286e-9a18-415c-b47d-b9fbbd4af787", "output": "39623a2d-0940-4fca-a6a8-7ce316f0bfb1", "target": "644af611-fc5c-44c8-bd6d-f2ffbde35c85", "input": "63d75fed-450e-4098-ad26-b8e0b2a8aa6e"}, {"source": "e6cee578-817e-4dfc-8ec5-349aa4a890d8", "output": "dc2228cc-f586-4465-bbfd-d048e6939384", "target": "940b0dfa-7ca3-42a0-a0e1-d00e3d458193", "input": "b87c2e37-dcc7-417c-947c-01f5720cf964"}, {"source": "05166d84-ce65-4cfe-82dc-45ccd53f828b", "output": "9a118ebf-f710-4b02-bb16-a0f9226d07a9", "target": "16283f3b-01e8-4d8a-8533-4265dd3bcc04", "input": "8171917c-59aa-4a4a-8953-4b517ef82d1a"}, {"source": "05166d84-ce65-4cfe-82dc-45ccd53f828b", "output": "9a118ebf-f710-4b02-bb16-a0f9226d07a9", "target": "16283f3b-01e8-4d8a-8533-4265dd3bcc04", "input": "4d58fcc1-7480-4506-b44e-a216bf7ad8fa"}, {"source": "16283f3b-01e8-4d8a-8533-4265dd3bcc04", "output": "ffbb83f0-9342-40ad-969e-704ed9e1d4b4", "target": "a65a5941-4459-4df9-9199-858c93134afe", "input": "7bc80988-e635-4b8a-ae46-856da22e8523"}, {"source": "05166d84-ce65-4cfe-82dc-45ccd53f828b", "output": "9a118ebf-f710-4b02-bb16-a0f9226d07a9", "target": "7c48ba51-b232-42e8-92f6-a884fe1cfd46", "input": "b324e160-6eac-4291-b98d-d8cd34d19e92"}, {"source": "05166d84-ce65-4cfe-82dc-45ccd53f828b", "output": "9a118ebf-f710-4b02-bb16-a0f9226d07a9", "target": "7c48ba51-b232-42e8-92f6-a884fe1cfd46", "input": "00bd0db2-3d57-45b8-bc10-2722728726ed"}, {"source": "7c48ba51-b232-42e8-92f6-a884fe1cfd46", "output": "6229a355-f25e-4857-9494-7e320e508f94", "target": "e05c3ece-3f18-49a4-8079-ad25741dee69", "input": "bd94fd96-a379-443e-a5ed-4a8966eb1aec"}, {"source": "a65a5941-4459-4df9-9199-858c93134afe", "output": "588a2414-9068-4722-8d0c-dbddcb5d95c2", "target": "3694fce6-cd3f-479f-b3e8-95d2f442bf28", "input": "0efc79e2-3269-46ab-b498-8d0203053651"}, {"source": "a65a5941-4459-4df9-9199-858c93134afe", "output": "588a2414-9068-4722-8d0c-dbddcb5d95c2", "target": "3694fce6-cd3f-479f-b3e8-95d2f442bf28", "input": "29b0accc-bb79-4ff7-b1aa-66e262c49593"}, {"source": "3694fce6-cd3f-479f-b3e8-95d2f442bf28", "output": "33db3b19-8363-4e4e-b4cf-18b02db40b8c", "target": "e05c3ece-3f18-49a4-8079-ad25741dee69", "input": "a7c25ae6-4cad-43c2-9ae7-f03f67e14da0"}, {"source": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "output": "ebf86192-041c-4324-a6cd-d15462835abd", "target": "05166d84-ce65-4cfe-82dc-45ccd53f828b", "input": "2a04fc7d-2aa1-4ec1-9070-762a6e51a778"}, {"source": "4abb8851-5b69-4871-abe7-aa991031caa8", "output": "556c9950-0945-4266-b941-9b89febacc59", "target": "3350a91d-80b6-4699-b572-53b23bc5db34", "input": "e271eede-c113-49d7-a78d-8de311fa5b82"}, {"source": "4abb8851-5b69-4871-abe7-aa991031caa8", "output": "556c9950-0945-4266-b941-9b89febacc59", "target": "3350a91d-80b6-4699-b572-53b23bc5db34", "input": "ff0a5da4-3ee7-4a1c-9e19-61631ec96022"}, {"source": "3350a91d-80b6-4699-b572-53b23bc5db34", "output": "d728418a-887c-40c2-82c1-98243d0b7615", "target": "c6670238-ee96-40cc-b297-153d402ae9fe", "input": "5f92f375-a651-47dc-ab59-57e946cd2fa4"}, {"source": "4abb8851-5b69-4871-abe7-aa991031caa8", "output": "556c9950-0945-4266-b941-9b89febacc59", "target": "ac307648-5c91-4f04-be7f-4584598b67db", "input": "1d3c7d58-f4f5-4b7d-b333-b284dcb04dac"}, {"source": "4abb8851-5b69-4871-abe7-aa991031caa8", "output": "556c9950-0945-4266-b941-9b89febacc59", "target": "ac307648-5c91-4f04-be7f-4584598b67db", "input": "7789a5c4-00fb-436d-88f7-0dd92c91207f"}, {"source": "ac307648-5c91-4f04-be7f-4584598b67db", "output": "b536164c-1514-4a3e-bb71-bbcd97d7fd9f", "target": "e6cee578-817e-4dfc-8ec5-349aa4a890d8", "input": "fc6afec5-897c-4f1a-9026-06b073309205"}, {"source": "c6670238-ee96-40cc-b297-153d402ae9fe", "output": "9a85125b-181f-44eb-9782-eac33e7ad154", "target": "5f458de2-3861-4c10-9923-892304a01f92", "input": "c01d5869-a33c-4252-80aa-d4c784805aaa"}, {"source": "c6670238-ee96-40cc-b297-153d402ae9fe", "output": "9a85125b-181f-44eb-9782-eac33e7ad154", "target": "5f458de2-3861-4c10-9923-892304a01f92", "input": "603bbdbf-5533-4fec-83e2-58ff659fffa6"}, {"source": "5f458de2-3861-4c10-9923-892304a01f92", "output": "5408cd99-27e9-4d83-9566-829755078a2e", "target": "e6cee578-817e-4dfc-8ec5-349aa4a890d8", "input": "7ced061a-84e9-4cd1-a34e-df66f3a8ae3a"}, {"source": "e05c3ece-3f18-49a4-8079-ad25741dee69", "output": "8dd82b47-c5cf-40ee-88d5-d770a4d8c3fd", "target": "4abb8851-5b69-4871-abe7-aa991031caa8", "input": "7a87db4d-79c7-465a-9922-ac9d216339e6"}, {"source": "bcf89be6-a988-4989-acc5-0d767f284fbd", "output": "57f7295c-b874-4b33-831c-7068cdbb1543", "target": "d03ad6e7-03cc-4b8a-89b1-c4e58da835c1", "input": "87e73b71-91be-462e-8d01-c8956799c845"}, {"source": "bcf89be6-a988-4989-acc5-0d767f284fbd", "output": "57f7295c-b874-4b33-831c-7068cdbb1543", "target": "d03ad6e7-03cc-4b8a-89b1-c4e58da835c1", "input": "0cb374e3-ffb0-485c-8a03-dc5fe5c68d1a"}, {"source": "d03ad6e7-03cc-4b8a-89b1-c4e58da835c1", "output": "2fa8f708-2c0e-4b3f-aca8-ef0849707b7c", "target": "50ca6329-acd4-40f0-b7e8-ec1cc135a915", "input": "b4c9f058-68c5-41d4-a02f-dd390a9be8d8"}, {"source": "bcf89be6-a988-4989-acc5-0d767f284fbd", "output": "57f7295c-b874-4b33-831c-7068cdbb1543", "target": "470febe3-cbb3-40ca-b26c-1dae30cc40ab", "input": "62e87555-9b61-42de-b4b7-b4e51cd12be9"}, {"source": "bcf89be6-a988-4989-acc5-0d767f284fbd", "output": "57f7295c-b874-4b33-831c-7068cdbb1543", "target": "470febe3-cbb3-40ca-b26c-1dae30cc40ab", "input": "a0a500a2-75ad-4bc8-aeb7-f7ec0658fdc4"}, {"source": "470febe3-cbb3-40ca-b26c-1dae30cc40ab", "output": "57c65473-70e5-42ce-964f-44d7b75c348b", "target": "4ac5e17a-4985-40f5-b5f4-9c550ecd575f", "input": "a2493b08-bc73-4cd3-b32b-8b10106538dc"}, {"source": "50ca6329-acd4-40f0-b7e8-ec1cc135a915", "output": "269c5080-8832-4df7-bd4f-ff19604745fa", "target": "c9e221fb-56cb-4302-b1b3-c2881086cb54", "input": "732e38fc-419c-47ba-abb5-f30e164a31ff"}, {"source": "50ca6329-acd4-40f0-b7e8-ec1cc135a915", "output": "269c5080-8832-4df7-bd4f-ff19604745fa", "target": "c9e221fb-56cb-4302-b1b3-c2881086cb54", "input": "c4a533d4-6055-4988-8a80-0864af1c0a97"}, {"source": "c9e221fb-56cb-4302-b1b3-c2881086cb54", "output": "747b8214-f425-4b09-bb34-1cd7df086e4e", "target": "4ac5e17a-4985-40f5-b5f4-9c550ecd575f", "input": "83387cdf-6aca-4f13-ab24-9447bcfd8c5a"}, {"source": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "output": "2b2d17ca-4c51-40ed-b813-24e6c0aa5528", "target": "bcf89be6-a988-4989-acc5-0d767f284fbd", "input": "72108e92-d418-4b3c-876f-1ec73a8c2b5f"}, {"source": "c00feba5-a670-4108-8f17-96795ea0cd2d", "output": "dedaebbf-3e6e-4f30-aee0-90ea6d072425", "target": "6bb7cb68-f653-44f9-b387-7edd79bc1aeb", "input": "d1f4be35-1328-4959-a523-7badf0baac2f"}, {"source": "c00feba5-a670-4108-8f17-96795ea0cd2d", "output": "dedaebbf-3e6e-4f30-aee0-90ea6d072425", "target": "6bb7cb68-f653-44f9-b387-7edd79bc1aeb", "input": "90650e01-4a40-4fbe-a3b8-d1714e07f5ca"}, {"source": "6bb7cb68-f653-44f9-b387-7edd79bc1aeb", "output": "56680e45-447f-49ca-b6a4-60c57d8c685c", "target": "e67e9c99-2654-44b0-8b47-3d2b5caa0604", "input": "58cddffb-7ace-4dca-b3ba-18b2686e1b97"}, {"source": "c00feba5-a670-4108-8f17-96795ea0cd2d", "output": "dedaebbf-3e6e-4f30-aee0-90ea6d072425", "target": "a8646b0b-4bd7-4f66-a26b-6776a6258fb5", "input": "3a7b8d2f-1f67-4199-88c1-2e1169391a9d"}, {"source": "c00feba5-a670-4108-8f17-96795ea0cd2d", "output": "dedaebbf-3e6e-4f30-aee0-90ea6d072425", "target": "a8646b0b-4bd7-4f66-a26b-6776a6258fb5", "input": "4a58fb07-159f-41a6-ba60-c6128ce8e398"}, {"source": "a8646b0b-4bd7-4f66-a26b-6776a6258fb5", "output": "eab9718e-8b92-428d-9728-3cff1f419842", "target": "a481cfc8-9530-4630-9aef-da7195256517", "input": "677c4a2a-af05-493a-b3fc-cbd20c122a59"}, {"source": "e67e9c99-2654-44b0-8b47-3d2b5caa0604", "output": "8759bf0c-8154-4ba1-b51f-cce1d711ff4e", "target": "71dddc3b-97fd-482c-9a84-25709ba0d884", "input": "d73d4f74-0293-4eb9-8e70-d1d21160f6e4"}, {"source": "e67e9c99-2654-44b0-8b47-3d2b5caa0604", "output": "8759bf0c-8154-4ba1-b51f-cce1d711ff4e", "target": "71dddc3b-97fd-482c-9a84-25709ba0d884", "input": "eb037f47-5786-4d08-a078-863db4022f61"}, {"source": "71dddc3b-97fd-482c-9a84-25709ba0d884", "output": "d166a821-e5a4-484b-90b7-3fdd15ef119c", "target": "a481cfc8-9530-4630-9aef-da7195256517", "input": "c5186001-852c-4106-8235-3725d66826dc"}, {"source": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "output": "2b2d17ca-4c51-40ed-b813-24e6c0aa5528", "target": "c00feba5-a670-4108-8f17-96795ea0cd2d", "input": "098d382c-9da0-4cf0-ad3c-acf0bec1c66a"}, {"source": "744e4a20-0501-4755-9b11-ad5cbd15282c", "output": "35b677f5-cae1-4258-a963-20e3518ad889", "target": "add9cc18-268d-4b12-81b9-67516337fdf0", "input": "896d1ab5-f69e-47ea-82a3-ff0625ba2287"}, {"source": "744e4a20-0501-4755-9b11-ad5cbd15282c", "output": "35b677f5-cae1-4258-a963-20e3518ad889", "target": "add9cc18-268d-4b12-81b9-67516337fdf0", "input": "1d001c7f-54ad-4eab-b342-25599fb290cb"}, {"source": "add9cc18-268d-4b12-81b9-67516337fdf0", "output": "1a91e115-8337-4857-a2cb-f06f6c2f5758", "target": "f4a2553e-2ebf-4b3c-b1af-1e86e8ab0c08", "input": "ca4036d0-0d4d-4de3-a574-bd6a245bc554"}, {"source": "744e4a20-0501-4755-9b11-ad5cbd15282c", "output": "35b677f5-cae1-4258-a963-20e3518ad889", "target": "01607dba-7dbb-446d-83c5-0bbcd4719243", "input": "078a0260-2255-42c8-98b8-7593b15477df"}, {"source": "744e4a20-0501-4755-9b11-ad5cbd15282c", "output": "35b677f5-cae1-4258-a963-20e3518ad889", "target": "01607dba-7dbb-446d-83c5-0bbcd4719243", "input": "65e04fd1-04b8-4520-8481-38fd35804f1c"}, {"source": "01607dba-7dbb-446d-83c5-0bbcd4719243", "output": "a3896056-4ee4-4727-a43a-2150ee863cf4", "target": "e9788b4b-0a5f-4116-b56f-9e805bad544e", "input": "2269e321-3d5d-4aa1-9fd9-6b20c39109d3"}, {"source": "f4a2553e-2ebf-4b3c-b1af-1e86e8ab0c08", "output": "0843f9fd-ee6c-4934-92bc-0f6af390fded", "target": "83c160d8-d49e-4c8c-be8f-cda260cd7ac3", "input": "3d0ecf78-da3c-4a3a-8f6e-d509f44c78a3"}, {"source": "f4a2553e-2ebf-4b3c-b1af-1e86e8ab0c08", "output": "0843f9fd-ee6c-4934-92bc-0f6af390fded", "target": "83c160d8-d49e-4c8c-be8f-cda260cd7ac3", "input": "778c2135-3476-4bc5-966d-303c0d8a3463"}, {"source": "83c160d8-d49e-4c8c-be8f-cda260cd7ac3", "output": "5a2ce54e-bd71-40c8-a463-a426f8b3663c", "target": "e9788b4b-0a5f-4116-b56f-9e805bad544e", "input": "927f8344-dff9-48a3-a44f-bc0b6f0bccb8"}, {"source": "edc1b5ea-e8ac-4613-8199-198bf06d0958", "output": "2b2d17ca-4c51-40ed-b813-24e6c0aa5528", "target": "744e4a20-0501-4755-9b11-ad5cbd15282c", "input": "8b0deb09-116f-44a6-ae7c-aabfeda35f50"}, {"source": "ecdff2fb-00ad-4298-9fce-6b9a4025523e", "output": "dc687112-e9cd-4a7d-bd84-9d8b4bc33221", "target": "79db62e0-b7a4-4b43-b6d4-4f4028b52565", "input": "6c656365-aabb-451b-b03b-56f4ac747867"}, {"source": "72395327-99f6-4cf4-b6b1-4b048e307b4b", "output": "6b074340-e2e4-49a0-aae4-9fff9b37b22b", "target": "e2ec4480-4809-405e-aef0-170160118a96", "input": "ac791cd3-2b0d-4595-915f-f41840b80205"}], "bendpoints": "[{\"source\": \"e9788b4b-0a5f-4116-b56f-9e805bad544e\", \"target\": \"13069fb2-329c-45b6-9cb5-6bccd80145e7\", \"coordinates\": \"310:1965\"}, {\"source\": \"4572286e-9a18-415c-b47d-b9fbbd4af787\", \"target\": \"644af611-fc5c-44c8-bd6d-f2ffbde35c85\", \"coordinates\": \"530:350\"}, {\"source\": \"e6cee578-817e-4dfc-8ec5-349aa4a890d8\", \"target\": \"940b0dfa-7ca3-42a0-a0e1-d00e3d458193\", \"coordinates\": \"530:1125\"}, {\"source\": \"3694fce6-cd3f-479f-b3e8-95d2f442bf28\", \"target\": \"e05c3ece-3f18-49a4-8079-ad25741dee69\", \"coordinates\": \"860:750\"}, {\"source\": \"edc1b5ea-e8ac-4613-8199-198bf06d0958\", \"target\": \"05166d84-ce65-4cfe-82dc-45ccd53f828b\", \"coordinates\": \"805:530\"}, {\"source\": \"5f458de2-3861-4c10-9923-892304a01f92\", \"target\": \"e6cee578-817e-4dfc-8ec5-349aa4a890d8\", \"coordinates\": \"1160:1030\"}, {\"source\": \"e05c3ece-3f18-49a4-8079-ad25741dee69\", \"target\": \"4abb8851-5b69-4871-abe7-aa991031caa8\", \"coordinates\": \"1105:845\"}, {\"source\": \"c9e221fb-56cb-4302-b1b3-c2881086cb54\", \"target\": \"4ac5e17a-4985-40f5-b5f4-9c550ecd575f\", \"coordinates\": \"1460:1310\"}, {\"source\": \"edc1b5ea-e8ac-4613-8199-198bf06d0958\", \"target\": \"bcf89be6-a988-4989-acc5-0d767f284fbd\", \"coordinates\": \"1405:530\"}, {\"source\": \"71dddc3b-97fd-482c-9a84-25709ba0d884\", \"target\": \"a481cfc8-9530-4630-9aef-da7195256517\", \"coordinates\": \"1760:1590\"}, {\"source\": \"edc1b5ea-e8ac-4613-8199-198bf06d0958\", \"target\": \"c00feba5-a670-4108-8f17-96795ea0cd2d\", \"coordinates\": \"1705:530\"}, {\"source\": \"83c160d8-d49e-4c8c-be8f-cda260cd7ac3\", \"target\": \"e9788b4b-0a5f-4116-b56f-9e805bad544e\", \"coordinates\": \"2060:1870\"}, {\"source\": \"edc1b5ea-e8ac-4613-8199-198bf06d0958\", \"target\": \"744e4a20-0501-4755-9b11-ad5cbd15282c\", \"coordinates\": \"2005:530\"}, {\"source\": \"ecdff2fb-00ad-4298-9fce-6b9a4025523e\", \"target\": \"79db62e0-b7a4-4b43-b6d4-4f4028b52565\", \"coordinates\": \"310:120\"}]", "labels": "[{\"identifier\": \"24952dcd-a532-4019-81b1-f05a697aea37\", \"headerText\": \"\", \"text\": \"Optimizer Loop\", \"location\": \"200:200\", \"size\": \"1940:1840\", \"alpha\": \"180\", \"colorHeader\": \"0:0:0\", \"colorText\": \"0:0:0\", \"colorBackground\": \"192:192:192\", \"labelPosition\": \"TOPRIGHT\", \"textAlignmentType\": \"LEFT\", \"headerAlignmentType\": \"CENTER\", \"border\": \"false\", \"headerSize\": \"14\", \"textSize\": \"10\", \"zIndex\": 0}, {\"identifier\": \"36e36af4-1b94-432f-9210-7b39a548b99f\", \"headerText\": \"\", \"text\": \"Converger Loop\", \"location\": \"420:420\", \"size\": \"820:780\", \"alpha\": \"180\", \"colorHeader\": \"0:0:0\", \"colorText\": \"0:0:0\", \"colorBackground\": \"0:255:255\", \"labelPosition\": \"TOPRIGHT\", \"textAlignmentType\": \"LEFT\", \"headerAlignmentType\": \"CENTER\", \"border\": \"false\", \"headerSize\": \"14\", \"textSize\": \"10\", \"zIndex\": 0}]"}